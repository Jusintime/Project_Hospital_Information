mutate (impact.percentage.on.state = (Total.Discharges.For.State / population.estimate.2011)*100,
impact.on.hundred.thousand =  (Total.Discharges.For.State / population.estimate.2011)*100000)
#Importing the required libraries
library(devtools)
library (dplyr)
library (knitr)
library (plotly)
library(RColorBrewer)
#Function to create a Choropleth map of the imapact of a DRG on a particular state
#The function is created to be resusable in the future
#such that a DRG Dataset for any year can be added to our dataset and accordingly the population dataset for that year can be added
#Our current project though only discusses these datasets for the year 2011
drg_impact_choropleth_map <- function (drg.name, drg.data, population.estimate) {
#Creating a dataframe of total number of discharges for each state for a particular DRG
#and add columns to show the impact of the DRG on the people of the state
discharges.for.each.state.with.population <-  filter (drg.data, DRG.Definition == drg.name) %>%
select (DRG.Definition,Provider.State,Provider.State.Name,Total.Discharges)  %>%
ungroup () %>%
group_by(Provider.State,Provider.State.Name,DRG.Definition) %>%
summarise(Total.Discharges.For.State = sum (Total.Discharges)) %>%
rename ( state.name = Provider.State.Name ) %>%
left_join(population.estimate, by = "state.name") %>%
mutate (impact.percentage.on.state = (Total.Discharges.For.State / population.estimate.2011)*100,
impact.on.hundred.thousand =  (Total.Discharges.For.State / population.estimate.2011)*100000)
#Creating a Choropleth Map (below) :
#Hover Information
discharges.for.each.state.with.population$hover <- with(discharges.for.each.state.with.population,paste(state.name,'<br>',"Total Discharges:",Total.Discharges.For.State,'<br>',
"Estimated Percentage of Population Impacted:", impact.percentage.on.state, "%",'<br>',
"Approximate Population of State for 2011:", population.estimate.2011, '<br>',
"Total Cases per Hundred Thousand:",impact.on.hundred.thousand))
#Give state boundries a white color border
border.color <- list(color = toRGB("white"), width = 2)
#Specify some map projection/options
map.projections <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
#Choropleth Map
choropleth.map <- plot_geo(discharges.for.each.state.with.population, locationmode = 'USA-states') %>%
add_trace(
z = ~impact.percentage.on.state, text = ~hover, hoverinfo ="text", locations = ~Provider.State,
color = ~impact.percentage.on.state, colors = 'Reds'
) %>%
colorbar(title = "Estimated Impact Percentage") %>%
layout(
title = '<b style="color:CF000F">Impact Percentage of a DRG on a State</b><br>Hover to learn more',
geo = map.projections , hovermode="closest"
)
#Return a Choropleth Map
return (choropleth.map)
}
runApp()
runApp()
View (hospital.data)
hospital.data <- hospital.data <- read.csv("./data/hospital_data_with_state_name.csv",stringsAsFactors = FALSE)
View (hospital.data)
population.data <- read.csv("./data/population_estimate_for_2011.csv",stringsAsFactors = FALSE)
drg_impact_choropleth_map ("039 - EXTRACRANIAL PROCEDURES W/O CC/MCC",hospital.data,population.data)
#Importing the required libraries
library(devtools)
library (dplyr)
library (knitr)
library (plotly)
library(RColorBrewer)
hospital.data <- read.csv("./data/hospital_data_with_state_name.csv",stringsAsFactors = FALSE)
population.data <- read.csv("./data/population_estimate_for_2011.csv",stringsAsFactors = FALSE)
#Function to create a Choropleth map of the imapact of a DRG on a particular state
#The function is created to be resusable in the future
#such that a DRG Dataset for any year can be added to our dataset and accordingly the population dataset for that year can be added
#Our current project though only discusses these datasets for the year 2011
drg_impact_choropleth_map <- function (drg.name, drg.data, population.estimate) {
#Creating a dataframe of total number of discharges for each state for a particular DRG
#and add columns to show the impact of the DRG on the people of the state
discharges.for.each.state.with.population <-  filter (drg.data, DRG.Definition == drg.name) %>%
select (DRG.Definition,Provider.State,Provider.State.Name,Total.Discharges)  %>%
ungroup () %>%
group_by(Provider.State,Provider.State.Name,DRG.Definition) %>%
summarise(Total.Discharges.For.State = sum (Total.Discharges)) %>%
rename ( state.name = Provider.State.Name ) %>%
left_join(population.estimate, by = "state.name") %>%
mutate (impact.percentage.on.state = (Total.Discharges.For.State / population.estimate.2011)*100,
impact.on.hundred.thousand =  (Total.Discharges.For.State / population.estimate.2011)*100000)
#Creating a Choropleth Map (below) :
#Hover Information
discharges.for.each.state.with.population$hover <- with(discharges.for.each.state.with.population,paste(state.name,'<br>',"Total Discharges:",Total.Discharges.For.State,'<br>',
"Estimated Percentage of Population Impacted:", impact.percentage.on.state, "%",'<br>',
"Approximate Population of State for 2011:", population.estimate.2011, '<br>',
"Total Cases per Hundred Thousand:",impact.on.hundred.thousand))
#Give state boundries a white color border
border.color <- list(color = toRGB("white"), width = 2)
#Specify some map projection/options
map.projections <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
#Choropleth Map
choropleth.map <- plot_geo(discharges.for.each.state.with.population, locationmode = 'USA-states') %>%
add_trace(
z = ~impact.percentage.on.state, text = ~hover, hoverinfo ="text", locations = ~Provider.State,
color = ~impact.percentage.on.state, colors = 'Reds'
) %>%
colorbar(title = "Estimated <br> Impact <br>Percentage") %>%
layout(
title = '<b style="color:CF000F">Impact Percentage of a DRG on a State</b><br>Hover to learn more',
geo = map.projections , hovermode="closest"
)
#Return a Choropleth Map
return (choropleth.map)
}
drg_impact_choropleth_map ("039 - EXTRACRANIAL PROCEDURES W/O CC/MCC",hospital.data,population.data)
source("scripts/drg_percentage_impact.r")
runApp()
runApp()
map.title
map.title <- "Total Discharges for Each State"
map.title <- paste0 ('<b style="color:CF000F">', map.title,"</b><br>",'Hover to learn more')
map.title
map.title <- "Total Discharges for Each State"
map.title <- paste0 ('<b style=\"color:CF000F\">', map.title,"</b><br>",'Hover to learn more')
map.title
map.title <- "Total Discharges for Each State"
map.title <- paste0 ("<b style=\"color:CF000F\">", map.title,"</b><br>",'Hover to learn more')
map.title
map.title <- "Total Discharges for Each State"
map.title <- paste0 ('<b style= "color:CF000F " >', map.title,"</b><br>",'Hover to learn more')
map.title
map.title
#Importing the required libraries
library(devtools)
library (dplyr)
library (knitr)
library (plotly)
library(RColorBrewer)
#Function to create a Choropleth map of the imapact of a DRG on a particular state
#The function is created to be resusable in the future
#such that a DRG Dataset for any year can be added to our dataset and accordingly the population dataset for that year can be added
#Our current project though only discusses these datasets for the year 2011
drg_impact_choropleth_map <- function (drg.name, column.to.display, drg.data, population.estimate) {
#Creating a dataframe of total number of discharges for each state for a particular DRG
#and add columns to show the impact of the DRG on the people of the state
discharges.for.each.state.with.population <-  filter (drg.data, DRG.Definition == drg.name) %>%
select (DRG.Definition,Provider.State,Provider.State.Name,Total.Discharges)  %>%
ungroup () %>%
group_by(Provider.State,Provider.State.Name,DRG.Definition) %>%
summarise(Total.Discharges.For.State = sum (Total.Discharges)) %>%
rename ( state.name = Provider.State.Name ) %>%
left_join(population.estimate, by = "state.name") %>%
mutate (impact.percentage.on.state = round(((Total.Discharges.For.State / population.estimate.2011)*100),2),
impact.on.hundred.thousand =  (Total.Discharges.For.State / population.estimate.2011)*100000)
#Creating a Choropleth Map (below) :
#Hover Information
discharges.for.each.state.with.population$hover <- with(discharges.for.each.state.with.population,paste(state.name,'<br>',
"Total Discharges:",Total.Discharges.For.State,'<br>',
"Estimated Percentage of Population Impacted:", impact.percentage.on.state, "%",'<br>',
"Approximate Population of State for 2011:", population.estimate.2011, '<br>',
"Total Discharges per Hundred Thousand:",impact.on.hundred.thousand))
#Give state boundries a white color border
border.color <- list(color = toRGB("white"), width = 2)
#Specify some map projection/options
map.projections <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
#If Else to decide what the map title and color legend title should be (decided by user input)
if (column.to.display = discharges.for.each.state.with.population$population.estimate.2011) {
map.title <- "Estimated Population for 2011"
color.legend.title <- "Estimated Population"
}
else if  (column.to.display = discharges.for.each.state.with.population$impact.on.hundred.thousand) {
map.title <- "Discharges per 100,000 people"
color.legend.title <- "Discharges per 100,000 people"
}
else if  (column.to.display = discharges.for.each.state.with.population$impact.percentage.on.state) {
map.title <- "Percentage of Discharges in State Population"
color.legend.title <- "Discharge Percentage"
}
else if  (column.to.display = discharges.for.each.state.with.population$Total.Discharges.For.State) {
map.title <- "Total Discharges for Each State"
color.legend.title <- "Total Discharges"
}
#Pasting HTML Into Title
map.title <- paste0 ('<b style="color:CF000F">', map.title,"</b><br>",'Hover to learn more')
#Choropleth Map
choropleth.map <- plot_geo(discharges.for.each.state.with.population, locationmode = 'USA-states') %>%
add_trace(z = ~eval(parse(text = column.to.display)), text = ~hover, hoverinfo ="text", locations = ~Provider.State,
color = ~eval(parse(text = column.to.display)), colors = 'Reds') %>%
colorbar(title = color.legend.title) %>%
layout(title = map.title,
geo = map.projections , hovermode="closest")
#Return a Choropleth Map
return (choropleth.map)
}
#Importing the required libraries
library(devtools)
library (dplyr)
library (knitr)
library (plotly)
library(RColorBrewer)
#Function to create a Choropleth map of the imapact of a DRG on a particular state
#The function is created to be resusable in the future
#such that a DRG Dataset for any year can be added to our dataset and accordingly the population dataset for that year can be added
#Our current project though only discusses these datasets for the year 2011
drg_impact_choropleth_map <- function (drg.name, column.to.display, drg.data, population.estimate) {
#Creating a dataframe of total number of discharges for each state for a particular DRG
#and add columns to show the impact of the DRG on the people of the state
discharges.for.each.state.with.population <-  filter (drg.data, DRG.Definition == drg.name) %>%
select (DRG.Definition,Provider.State,Provider.State.Name,Total.Discharges)  %>%
ungroup () %>%
group_by(Provider.State,Provider.State.Name,DRG.Definition) %>%
summarise(Total.Discharges.For.State = sum (Total.Discharges)) %>%
rename ( state.name = Provider.State.Name ) %>%
left_join(population.estimate, by = "state.name") %>%
mutate (impact.percentage.on.state = round(((Total.Discharges.For.State / population.estimate.2011)*100),2),
impact.on.hundred.thousand =  (Total.Discharges.For.State / population.estimate.2011)*100000)
#Creating a Choropleth Map (below) :
#Hover Information
discharges.for.each.state.with.population$hover <- with(discharges.for.each.state.with.population,paste(state.name,'<br>',
"Total Discharges:",Total.Discharges.For.State,'<br>',
"Estimated Percentage of Population Impacted:", impact.percentage.on.state, "%",'<br>',
"Approximate Population of State for 2011:", population.estimate.2011, '<br>',
"Total Discharges per Hundred Thousand:",impact.on.hundred.thousand))
#Give state boundries a white color border
border.color <- list(color = toRGB("white"), width = 2)
#Specify some map projection/options
map.projections <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
#If Else to decide what the map title and color legend title should be (decided by user input)
if (column.to.display = discharges.for.each.state.with.population$population.estimate.2011) {
map.title <- "Estimated Population for 2011"
color.legend.title <- "Estimated Population"
}
else if  (column.to.display = discharges.for.each.state.with.population$impact.on.hundred.thousand) {
map.title <- "Discharges per 100,000 people"
color.legend.title <- "Discharges per 100,000 people"
}
else if  (column.to.display = discharges.for.each.state.with.population$impact.percentage.on.state) {
map.title <- "Percentage of Discharges in State Population"
color.legend.title <- "Discharge Percentage"
}
else if  (column.to.display = discharges.for.each.state.with.population$Total.Discharges.For.State) {
map.title <- "Total Discharges for Each State"
color.legend.title <- "Total Discharges"
}
#Pasting HTML Into Title
map.title <- paste0 ('<b style="color:CF000F">', map.title,"</b><br>",'Hover to learn more')
#Choropleth Map
choropleth.map <- plot_geo(discharges.for.each.state.with.population, locationmode = 'USA-states') %>%
add_trace(z = ~eval(parse(text = column.to.display)), text = ~hover, hoverinfo ="text", locations = ~Provider.State,
color = ~eval(parse(text = column.to.display)), colors = 'Reds') %>%
colorbar(title = color.legend.title) %>%
layout(title = map.title,
geo = map.projections , hovermode="closest")
#Return a Choropleth Map
return (choropleth.map)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Desktop/201/a8-building-apps-zcolah/scripts/DRG_Impact_Table.R')
source('~/Desktop/201/a8-building-apps-zcolah/scripts/DRG_Impact_Table.R')
runApp()
hospital.data <- hospital.data <- read.csv("./data/hospital_data_with_state_name.csv",stringsAsFactors = FALSE)
population.data <- read.csv("./data/population_estimate_for_2011.csv",stringsAsFactors = FALSE)
View (hospital.data)
hospital.data <- hospital.data <- read.csv("./data/hospital_data_with_state_name.csv",stringsAsFactors = FALSE)
population.data <- read.csv("./data/population_estimate_for_2011.csv",stringsAsFactors = FALSE)
DRG_Impact_Table ("039 - EXTRACRANIAL PROCEDURES W/O CC/MCC",hospital.data,population.data)
hospital.data <- hospital.data <- read.csv("./data/hospital_data_with_state_name.csv",stringsAsFactors = FALSE)
hospital.data <- hospital.data <- read.csv("./data/hospital_data_with_state_name.csv",stringsAsFactors = FALSE)
population.data <- read.csv("./data/population_estimate_for_2011.csv",stringsAsFactors = FALSE)
hospital.data <- hospital.data <- read.csv("./data/hospital_data_with_state_name.csv",stringsAsFactors = FALSE)
population.data <- read.csv("./data/population_estimate_for_2011.csv",stringsAsFactors = FALSE)
DRG_Impact_Table ("039 - EXTRACRANIAL PROCEDURES W/O CC/MCC",hospital.data,population.data)
DRG_Impact_Table ("039 - EXTRACRANIAL PROCEDURES W/O CC/MCC",hospital.data,population.data)
DRG_Impact_Table <- function (drg.name, drg.data, population.estimate) {
#Creating a dataframe of total number of discharges for each state for a particular DRG
#and add columns to show the impact of the DRG on the people of the state
discharges.for.each.state.with.population <-  filter (drg.data, DRG.Definition == drg.name) %>%
select (DRG.Definition,Provider.State,Provider.State.Name,Total.Discharges)  %>%
ungroup () %>%
group_by(Provider.State,Provider.State.Name,DRG.Definition) %>%
summarise(Total.Discharges.For.State = sum (Total.Discharges)) %>%
rename ( state.name = Provider.State.Name ) %>%
left_join(population.estimate, by = "state.name") %>%
mutate (impact.percentage.on.state = round(((Total.Discharges.For.State / population.estimate.2011)*100),2),
impact.on.hundred.thousand =  (Total.Discharges.For.State / population.estimate.2011)*100000)
#select (-Provider.State,X)
#rename (State = state.name , "DRG Definition" = DRG.Definition, "Total Discharges" = Total.Discharges.For.State , "Population Estimate (2011)" = population.estimate.2011 )
#Return dataframee for discharges for each with population
return (discharges.for.each.state.with.population)
}
DRG_Impact_Table ("039 - EXTRACRANIAL PROCEDURES W/O CC/MCC",hospital.data,population.data)
DRG_Impact_Table <- function (drg.name, drg.data, population.estimate) {
#Creating a dataframe of total number of discharges for each state for a particular DRG
#and add columns to show the impact of the DRG on the people of the state
discharges.for.each.state.with.population <-  filter (drg.data, DRG.Definition == drg.name) %>%
select (DRG.Definition,Provider.State,Provider.State.Name,Total.Discharges)  %>%
ungroup () %>%
group_by(Provider.State,Provider.State.Name,DRG.Definition) %>%
summarise(Total.Discharges.For.State = sum (Total.Discharges)) %>%
rename ( state.name = Provider.State.Name ) %>%
left_join(population.estimate, by = "state.name") %>%
mutate (impact.percentage.on.state = round(((Total.Discharges.For.State / population.estimate.2011)*100),2),
impact.on.hundred.thousand =  (Total.Discharges.For.State / population.estimate.2011)*100000) %>%
rename (State = state.name , "DRG Definition" = DRG.Definition, "Total Discharges" = Total.Discharges.For.State , "Population Estimate (2011)" = population.estimate.2011 )
#Return dataframee for discharges for each with population
return (discharges.for.each.state.with.population)
}
#Importing the required libraries
library(devtools)
library (dplyr)
library (knitr)
library (plotly)
library (RColorBrewer)
#This function has been created to return a dataframe containing information for each state for a particular discharge which will be used to create a table
#The function is created to be resusable in the future
#such that a DRG Dataset for any year can be added to our dataset and accordingly the population dataset for that year can be passed as an argument
#Our current project though only discusses these datasets for the year 2011
DRG_Impact_Table <- function (drg.name, drg.data, population.estimate) {
#Creating a dataframe of total number of discharges for each state for a particular DRG
#and add columns to show the impact of the DRG on the people of the state
discharges.for.each.state.with.population <-  filter (drg.data, DRG.Definition == drg.name) %>%
select (DRG.Definition,Provider.State,Provider.State.Name,Total.Discharges)  %>%
ungroup () %>%
group_by(Provider.State,Provider.State.Name,DRG.Definition) %>%
summarise(Total.Discharges.For.State = sum (Total.Discharges)) %>%
rename ( state.name = Provider.State.Name ) %>%
left_join(population.estimate, by = "state.name") %>%
mutate (impact.percentage.on.state = round(((Total.Discharges.For.State / population.estimate.2011)*100),2),
impact.on.hundred.thousand =  (Total.Discharges.For.State / population.estimate.2011)*100000) %>%
select (-Provider.State, -X) %>%
rename (State = state.name , "DRG Definition" = DRG.Definition, "Total Discharges" = Total.Discharges.For.State , "Population Estimate (2011)" = population.estimate.2011 )
#Return dataframee for discharges for each with population
return (discharges.for.each.state.with.population)
}
hospital.data <- hospital.data <- read.csv("./data/hospital_data_with_state_name.csv",stringsAsFactors = FALSE)
population.data <- read.csv("./data/population_estimate_for_2011.csv",stringsAsFactors = FALSE)
DRG_Impact_Table ("039 - EXTRACRANIAL PROCEDURES W/O CC/MCC",hospital.data,population.data)
runApp()
runApp()
runApp()
runApp()
hospital.data <- hospital.data <- read.csv("./data/hospital_data_with_state_name.csv",stringsAsFactors = FALSE)
View (hospital.data)
shiny::runApp()
runApp()
install.packages ("shinythemes")
runApp()
library(shiny)
# source "DRG.location.payments" dataframe, buildBarChart function,
# and all the reactive functions.
source('./scripts/Data Wrangling.R')
source('./scripts/buildBarChart.R')
source('./scripts/Reactive Functions.R')
# Define server logic required to render comparative bar chart.
shinyServer(function(input, output) {
#Comparative Search by location and by hospital name and select a DRG :
# use reactive functions to make the uses' input choice to decide the next selectInput scope.
# For the first option
v.region1 <- reactive({Region(input$var.a1)})
v.city1 <- reactive({Cities(input$var.a2)})
v.hos1 <- reactive({Hospitals(input$var.a3)})
v.drg1 <- reactive({DRG(input$var.a4)})
# For the second option
v.region2 <- reactive({Region(input$var.b1)})
v.city2 <- reactive({Cities(input$var.b2)})
v.hos2 <- reactive({Hospitals(input$var.b3)})
v.drg2 <- reactive({DRG(input$var.b4)})
# build reactive selectInputs and render them to outputs.
output$selectUIregionA <- renderUI({
selectInput("var.a2", "Provider Hospital Referral Region A", choices = v.region1())
})
output$selectUIcityA <- renderUI({
selectInput("var.a3", "Provider City A", choices = v.city1())
})
output$selectUIhosA <- renderUI({
selectInput("var.a4", "Provider Hospital A", choices = v.hos1())
})
output$selectUIdrgA <- renderUI({
selectInput("var.a5", "Diagnosis-Related Group (DRG) A", choices = v.drg1())
})
output$selectUIregionB <- renderUI({
selectInput("var.b2", "Provider Hospital Referral Region B", choices = v.region2())
})
output$selectUIcityB <- renderUI({
selectInput("var.b3", "Provider City B", choices = v.city2())
})
output$selectUIhosB <- renderUI({
selectInput("var.b4", "Provider Hospital B", choices = v.hos2())
})
output$selectUIdrgB <- renderUI({
selectInput("var.b5", "Diagnosis-Related Group (DRG) B", choices = v.drg2())
})
# render the plot to the output and link all the variables from input by identifiers.
output$distPlot <- renderPlotly({
return(DrawBarplot(data = DRG.location.payments,
state1 = input$var.a1,
region1 = input$var.a2,
city1 = input$var.a3,
hos1 = input$var.a4,
drg1 = input$var.a5,
state2 = input$var.b1,
region2 = input$var.b2,
city2 = input$var.b3,
hos2 = input$var.b4,
drg2 = input$var.b5))
})
# This is a data table that render the information from bar chart
output$hospital.locations.table <- renderTable({
BuildTable(state1 = input$var.a1,
region1 = input$var.a2,
city1 = input$var.a3,
hos1 = input$var.a4,
drg1 = input$var.a5,
state2 = input$var.b1,
region2 = input$var.b2,
city2 = input$var.b3,
hos2 = input$var.b4,
drg2 = input$var.b5)
})
})
library(shiny)
# source "DRG.location.payments" dataframe, buildBarChart function,
# and all the reactive functions.
source('./scripts/Data Wrangling.R')
source('./scripts/buildBarChart.R')
source('./scripts/Reactive Functions.R')
# Define server logic required to render comparative bar chart.
shinyServer(function(input, output) {
#Comparative Search by location and by hospital name and select a DRG :
# use reactive functions to make the uses' input choice to decide the next selectInput scope.
# For the first option
v.region1 <- reactive({Region(input$var.a1)})
v.city1 <- reactive({Cities(input$var.a2)})
v.hos1 <- reactive({Hospitals(input$var.a3)})
v.drg1 <- reactive({DRG(input$var.a4)})
# For the second option
v.region2 <- reactive({Region(input$var.b1)})
v.city2 <- reactive({Cities(input$var.b2)})
v.hos2 <- reactive({Hospitals(input$var.b3)})
v.drg2 <- reactive({DRG(input$var.b4)})
# build reactive selectInputs and render them to outputs.
output$selectUIregionA <- renderUI({
selectInput("var.a2", "Provider Hospital Referral Region A", choices = v.region1())
})
output$selectUIcityA <- renderUI({
selectInput("var.a3", "Provider City A", choices = v.city1())
})
output$selectUIhosA <- renderUI({
selectInput("var.a4", "Provider Hospital A", choices = v.hos1())
})
output$selectUIdrgA <- renderUI({
selectInput("var.a5", "Diagnosis-Related Group (DRG) A", choices = v.drg1())
})
output$selectUIregionB <- renderUI({
selectInput("var.b2", "Provider Hospital Referral Region B", choices = v.region2())
})
output$selectUIcityB <- renderUI({
selectInput("var.b3", "Provider City B", choices = v.city2())
})
output$selectUIhosB <- renderUI({
selectInput("var.b4", "Provider Hospital B", choices = v.hos2())
})
output$selectUIdrgB <- renderUI({
selectInput("var.b5", "Diagnosis-Related Group (DRG) B", choices = v.drg2())
})
# render the plot to the output and link all the variables from input by identifiers.
output$distPlot <- renderPlotly({
return(DrawBarplot(data = DRG.location.payments,
state1 = input$var.a1,
region1 = input$var.a2,
city1 = input$var.a3,
hos1 = input$var.a4,
drg1 = input$var.a5,
state2 = input$var.b1,
region2 = input$var.b2,
city2 = input$var.b3,
hos2 = input$var.b4,
drg2 = input$var.b5))
})
# This is a data table that render the information from bar chart
output$hospital.locations.table <- renderTable({
BuildTable(state1 = input$var.a1,
region1 = input$var.a2,
city1 = input$var.a3,
hos1 = input$var.a4,
drg1 = input$var.a5,
state2 = input$var.b1,
region2 = input$var.b2,
city2 = input$var.b3,
hos2 = input$var.b4,
drg2 = input$var.b5)
})
})
