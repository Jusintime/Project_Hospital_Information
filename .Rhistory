Inpatient_Prospective_Payment_System_IPPS_Provider_Summary_for_the_Top_100_Diagnosis_Related_Groups_DRG_FY2011 <- read_csv("./data/Inpatient_Prospective_Payment_System__IPPS__Provider_Summary_for_the_Top_100_Diagnosis-Related_Groups__DRG__-_FY2011.csv")
View(Inpatient_Prospective_Payment_System_IPPS_Provider_Summary_for_the_Top_100_Diagnosis_Related_Groups_DRG_FY2011)
source('~/.active-rstudio-document', echo=TRUE)
is.data.frame(drgs)
#list of the drg name that is going to pass in the ui
drgs <- tab7.data %>%
#select the region name column in tab3.data
select(DRG.Definition) %>%
#discard the repeated region name
distinct(DRG.Definition)
is.data.frame(drgs)
setwd("~/")
setwd("~/Desktop/201/Project_Hospital_Information")
shiny::runApp()
runApp()
runApp()
runApp()
install.packages('leaflet')
runApp()
install.packages('maps')
runApp()
runApp()
install.packages("choroplethr")
install.packages("choroplethr")
shiny::runApp()
installed.packages(‘choroplethr’)
install.packages(‘choroplethr’)
install.packages ("choroplethr")
#Loading Libraries
library(plotly)
library(stringr)
library(dplyr)
library(shiny)
library(markdown)
library(leaflet)
library(choroplethr)
# Read in the drg names
hospital.data.drg <- read.csv("data/hospital_data_drg.csv")
#Sourcing for Select a county and get information about the hospitals in that city for a particular DRG
source('./scripts/search_hospitals_by_region.R')
source ('./scripts/support_functions_search_hospital_by_region.R')
#Sourcing for finding gap between medicare and payment for DRG
source('./scripts/find_gap_between_total_payments_and_medicare.R')
source('./scripts/support_functions_finding_gap_between_total_payments_and_medicare.R')
#
navbarPage("Lays' Project : DRG Analyis",
# Make a title for the application
tabPanel('Insurance/Medicare Rate',
# Create a sidebar with widgets that will modify the map
sidebarLayout(
sidebarPanel(
# Select input for the DRGs
selectInput("selected.drg.for.leaflet",
"Select DRG",
hospital.data.drg$DRG.Definition,
selected = "039 - EXTRACRANIAL PROCEDURES W/O CC/MCC"),
# This puts the slider bar that will adjust based on the selected drg
htmlOutput("numeric.range")
),
# The main panel will display the map
mainPanel(
# Show a map of where the hospitals are that fit the DRG and the maximum payment
leafletOutput("map"),
# Show a table of the data about the hospitals
dataTableOutput("hospital.locations.table")
))
),
tabPanel("Hospital Locations Map",
# Create a sidebar with widgets that will modify the map
sidebarLayout(
sidebarPanel(
# These buttons will adjust the choropleth map
radioButtons("coverage",
"Coverage Options",
choices = list(Medicare = "State.Medicare.Coverage.Percent", Insurance = "State.Covered.Charges.Percent"),
selected = "State.Medicare.Coverage.Percent")
),
# The main panel will display the map
mainPanel(
# Show a map of each state and the average ratio between average covered charges and average total payment
plotlyOutput("coverage.choropleth")
)
)
),
tabPanel("Hospital Nearby",
#tab3 -  you find the hospitals that is in a region
#For people who want to have treatment near where they live
sidebarLayout(
sidebarPanel(
#select a Region
selectInput('region.select', label = 'Region',
choices = regions$Hospital.Referral.Region.Description),
#select a DRG
selectInput('drg.select', label  = 'DRG : DRG: Diagnosis-Related Group',
choices = drgs$DRG.Definition)),
mainPanel(
plotlyOutput('bar.chart.city.info')
)
)),
tabPanel('Medicare Gap',
#tab7-Muse, bigger gap between payment and medicare the bigger dot will be
#For government, to know which hospital need more assistance
sidebarLayout(
sidebarPanel(
selectInput('drg.select', label  = 'DRG: Diagnosis-Related Group',
choices = drgs$DRG.Definition)),
mainPanel(
plotlyOutput('drg.payment.medicare')
)
)),
navbarMenu('Whats More',
#More information about us
#introduce our project
#1. what is DRG, where we got the data
#2. what is the purpose
#3. who is the audience
tabPanel("About Team Lays",
fluidRow(
column(3,
img(class = 'img-lays',
src = paste0('http://www.perspectivebranding.com/images/uploads/portfolio/_960/Global_Lays_SINGLE.jpg')),
tags$small(
'Things you need to know:',
"1. Picture source: you search Lays online and click the first picture",
'2. We were eatting Lays chips when we tried to make a team.',
"3. Do you wanna know how can we make such awesome website?",
"You Google it!"
)
)),
tabPanel('About the Project')
)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
hospital.data <- hospital.data <- read.csv("./data/hospital_data_with_state_name.csv",stringsAsFactors = FALSE)
population.data <- read.csv("./data/population_estimate_for_2011.csv",stringsAsFactors = FALSE)
DRG_Impact_Table ("039 - EXTRACRANIAL PROCEDURES W/O CC/MCC",hospital.data,population.data)
hospital.data <- hospital.data <- read.csv("./data/hospital_data_with_state_name.csv",stringsAsFactors = FALSE)
population.data <- read.csv("./data/population_estimate_for_2011.csv",stringsAsFactors = FALSE)
DRG_Impact_Table ("039 - EXTRACRANIAL PROCEDURES W/O CC/MCC",hospital.data,population.data)
DRG_Impact_Table ("039 - EXTRACRANIAL PROCEDURES W/O CC/MCC",hospital.data,population.data)
#Importing the required libraries
library(devtools)
library (dplyr)
library (knitr)
library (plotly)
library (RColorBrewer)
#This function has been created to return a dataframe containing information for each state for a particular discharge which will be used to create a table
#The function is created to be resusable in the future
#such that a DRG Dataset for any year can be added to our dataset and accordingly the population dataset for that year can be passed as an argument
#Our current project though only discusses these datasets for the year 2011
DRG_Impact_Table <- function (drg.name, drg.data, population.estimate) {
#Creating a dataframe of total number of discharges for each state for a particular DRG
#and add columns to show the impact of the DRG on the people of the state
discharges.for.each.state.with.population <-  filter (drg.data, DRG.Definition == drg.name) %>%
select (DRG.Definition,Provider.State,Provider.State.Name,Total.Discharges)  %>%
group_by(Provider.State,Provider.State.Name,DRG.Definition) %>%
summarise(Total.Discharges.For.State = sum (Total.Discharges)) %>%
rename (state.name = Provider.State.Name) %>%
left_join(population.estimate, by = "state.name") %>%
mutate (impact.percentage.on.state = round(((Total.Discharges.For.State / population.estimate.2011)*100),2),
impact.on.hundred.thousand =  (Total.Discharges.For.State / population.estimate.2011)*100000) %>%
select (-Provider.State, -X) %>%
rename (State = state.name , "DRG Definition" = DRG.Definition, "Total Discharges" = Total.Discharges.For.State ,
"Population Estimate (2011)" = population.estimate.2011, "Percentage of Population discharged" = impact.percentage.on.state, "Number of Discharges in Every 100,000 people" =impact.on.hundred.thousand )
#Return dataframee for discharges for each with population
return (discharges.for.each.state.with.population)
}
hospital.data <- hospital.data <- read.csv("./data/hospital_data_with_state_name.csv",stringsAsFactors = FALSE)
population.data <- read.csv("./data/population_estimate_for_2011.csv",stringsAsFactors = FALSE)
DRG_Impact_Table ("039 - EXTRACRANIAL PROCEDURES W/O CC/MCC",hospital.data,population.data)
discharges.for.each.state.with.population <-  filter (drg.data, DRG.Definition == drg.name) %>%
select (DRG.Definition,Provider.State,Provider.State.Name,Total.Discharges)  %>%
group_by(Provider.State,Provider.State.Name,DRG.Definition) %>%
summarise(Total.Discharges.For.State = sum (Total.Discharges)) %>%
#rename (state.name = Provider.State.Name) %>%
#left_join(population.estimate, by = "state.name") %>%
#mutate (impact.percentage.on.state = round(((Total.Discharges.For.State / population.estimate.2011)*100),2),
#impact.on.hundred.thousand =  (Total.Discharges.For.State / population.estimate.2011)*100000)
#select (-Provider.State, -X) %>%
#rename (State = state.name , "DRG Definition" = DRG.Definition, "Total Discharges" = Total.Discharges.For.State ,
#"Population Estimate (2011)" = population.estimate.2011, "Percentage of Population discharged" = impact.percentage.on.state, "Number of Discharges in Every 100,000 people" =impact.on.hundred.thousand )
#Return dataframee for discharges for each with population
return (discharges.for.each.state.with.population)
hospital.data <- hospital.data <- read.csv("./data/hospital_data_with_state_name.csv",stringsAsFactors = FALSE)
population.data <- read.csv("./data/population_estimate_for_2011.csv",stringsAsFactors = FALSE)
DRG_Impact_Table ("039 - EXTRACRANIAL PROCEDURES W/O CC/MCC",hospital.data,population.data)
#Importing the required libraries
library(devtools)
library (dplyr)
library (knitr)
library (plotly)
library (RColorBrewer)
#This function has been created to return a dataframe containing information for each state for a particular discharge which will be used to create a table
#The function is created to be resusable in the future
#such that a DRG Dataset for any year can be added to our dataset and accordingly the population dataset for that year can be passed as an argument
#Our current project though only discusses these datasets for the year 2011
DRG_Impact_Table <- function (drg.name, drg.data, population.estimate) {
#Creating a dataframe of total number of discharges for each state for a particular DRG
#and add columns to show the impact of the DRG on the people of the state
discharges.for.each.state.with.population <-  filter (drg.data, DRG.Definition == drg.name) %>%
select (DRG.Definition,Provider.State,Provider.State.Name,Total.Discharges)  %>%
group_by(Provider.State,Provider.State.Name,DRG.Definition) %>%
summarise(Total.Discharges.For.State = sum (Total.Discharges)) %>%
#rename (state.name = Provider.State.Name) %>%
#left_join(population.estimate, by = "state.name") %>%
#mutate (impact.percentage.on.state = round(((Total.Discharges.For.State / population.estimate.2011)*100),2),
#impact.on.hundred.thousand =  (Total.Discharges.For.State / population.estimate.2011)*100000)
#select (-Provider.State, -X) %>%
#rename (State = state.name , "DRG Definition" = DRG.Definition, "Total Discharges" = Total.Discharges.For.State ,
#"Population Estimate (2011)" = population.estimate.2011, "Percentage of Population discharged" = impact.percentage.on.state, "Number of Discharges in Every 100,000 people" =impact.on.hundred.thousand )
#Return dataframee for discharges for each with population
return (discharges.for.each.state.with.population)
}
hospital.data <- hospital.data <- read.csv("./data/hospital_data_with_state_name.csv",stringsAsFactors = FALSE)
population.data <- read.csv("./data/population_estimate_for_2011.csv",stringsAsFactors = FALSE)
DRG_Impact_Table ("039 - EXTRACRANIAL PROCEDURES W/O CC/MCC",hospital.data,population.data)
#Importing the required libraries
library(devtools)
library (dplyr)
library (knitr)
library (plotly)
library (RColorBrewer)
#This function has been created to return a dataframe containing information for each state for a particular discharge which will be used to create a table
#The function is created to be resusable in the future
#such that a DRG Dataset for any year can be added to our dataset and accordingly the population dataset for that year can be passed as an argument
#Our current project though only discusses these datasets for the year 2011
DRG_Impact_Table <- function (drg.name, drg.data, population.estimate) {
#Creating a dataframe of total number of discharges for each state for a particular DRG
#and add columns to show the impact of the DRG on the people of the state
discharges.for.each.state.with.population <-  filter (drg.data, DRG.Definition == drg.name) %>%
select (DRG.Definition,Provider.State,Provider.State.Name,Total.Discharges)  %>%
group_by(Provider.State,Provider.State.Name,DRG.Definition) %>%
summarise(Total.Discharges.For.State = sum (Total.Discharges))
#rename (state.name = Provider.State.Name) %>%
#left_join(population.estimate, by = "state.name") %>%
#mutate (impact.percentage.on.state = round(((Total.Discharges.For.State / population.estimate.2011)*100),2),
#impact.on.hundred.thousand =  (Total.Discharges.For.State / population.estimate.2011)*100000)
#select (-Provider.State, -X) %>%
#rename (State = state.name , "DRG Definition" = DRG.Definition, "Total Discharges" = Total.Discharges.For.State ,
#"Population Estimate (2011)" = population.estimate.2011, "Percentage of Population discharged" = impact.percentage.on.state, "Number of Discharges in Every 100,000 people" =impact.on.hundred.thousand )
#Return dataframee for discharges for each with population
return (discharges.for.each.state.with.population)
}
hospital.data <- hospital.data <- read.csv("./data/hospital_data_with_state_name.csv",stringsAsFactors = FALSE)
population.data <- read.csv("./data/population_estimate_for_2011.csv",stringsAsFactors = FALSE)
DRG_Impact_Table ("039 - EXTRACRANIAL PROCEDURES W/O CC/MCC",hospital.data,population.data)
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
DRG_Impact_Table <- function (drg.name, drg.data, population.estimate) {
#Creating a dataframe of total number of discharges for each state for a particular DRG
#and add columns to show the impact of the DRG on the people of the state
discharges.for.each.state.with.population <-  filter (drg.data, DRG.Definition == drg.name) %>%
select (DRG.Definition,Provider.State,Provider.State.Name,Total.Discharges)  %>%
group_by(Provider.State,Provider.State.Name,DRG.Definition) %>%
summarise(Total.Discharges.For.State = sum (Total.Discharges))
#rename (state.name = Provider.State.Name) %>%
#left_join(population.estimate, by = "state.name") %>%
#mutate (impact.percentage.on.state = round(((Total.Discharges.For.State / population.estimate.2011)*100),2),
#impact.on.hundred.thousand =  (Total.Discharges.For.State / population.estimate.2011)*100000)
#select (-Provider.State, -X) %>%
#rename (State = state.name , "DRG Definition" = DRG.Definition, "Total Discharges" = Total.Discharges.For.State ,
#"Population Estimate (2011)" = population.estimate.2011, "Percentage of Population discharged" = impact.percentage.on.state, "Number of Discharges in Every 100,000 people" =impact.on.hundred.thousand )
#Return dataframee for discharges for each with population
return (discharges.for.each.state.with.population)
}
hospital.data <- hospital.data <- read.csv("./data/hospital_data_with_state_name.csv",stringsAsFactors = FALSE)
population.data <- read.csv("./data/population_estimate_for_2011.csv",stringsAsFactors = FALSE)
DRG_Impact_Table ("039 - EXTRACRANIAL PROCEDURES W/O CC/MCC",hospital.data,population.data)
discharges.for.each.state.with.population <-  filter (drg.data, DRG.Definition == drg.name) %>%
select (DRG.Definition,Provider.State,Provider.State.Name,Total.Discharges)  %>%
group_by(Provider.State,Provider.State.Name,DRG.Definition) %>%
summarise(Total.Discharges.For.State = sum (Total.Discharges)) %>%
rename (state.name = Provider.State.Name) %>%
left_join(population.estimate, by = "state.name") %>%
mutate (impact.percentage.on.state = round(((Total.Discharges.For.State / population.estimate.2011)*100),2),
impact.on.hundred.thousand =  (Total.Discharges.For.State / population.estimate.2011)*100000)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinythemes")
shinyUI(navbarPage("DRG Analysis",
# Make a title for the application
tabPanel("Hospital Locations Map",
# Create a sidebar with widgets that will modify the map
sidebarLayout(
sidebarPanel(
# Select input for the DRGs
selectInput("selected.drg.for.leaflet",
"Select DRG",
hospital.data.drg$DRG.Definition,
selected = "039 - EXTRACRANIAL PROCEDURES W/O CC/MCC"),
# This puts the slider bar that will adjust based on the selected drg
htmlOutput("numeric.range")),
# The main panel will display the map
mainPanel(
# Show a map of where the hospitals are that fit the DRG and the maximum payment
leafletOutput("map"),
# Show a table of the data about the hospitals
dataTableOutput("hospital.locations.table")))),
tabPanel('Insurance/Medicare Rate',
# Create a sidebar with widgets that will modify the map
sidebarLayout(
sidebarPanel(
# These buttons will adjust the choropleth map
radioButtons("coverage",
"Coverage Options",
choices = list(Medicare = "State.Medicare.Coverage.Percent", Insurance = "State.Covered.Charges.Percent"),
selected = "State.Medicare.Coverage.Percent")
),
mainPanel(
# Show a map of each state and the average ratio between average covered charges and average total payment
plotlyOutput("coverage.choropleth")
)
)
),
tabPanel("Hospital Nearby",
#tab3 -  you find the hospitals that is in a region
#For people who want to have treatment near where they live
sidebarLayout(
sidebarPanel(
#select a Region
selectInput('region.select', label = 'Region',
choices = regions$Hospital.Referral.Region.Description),
#select a DRG
selectInput('drg.select', label  = 'DRG : DRG: Diagnosis-Related Group',
choices = drgs$DRG.Definition)),
mainPanel(
plotlyOutput('bar.chart.city.info')
)
)),
# Make a title for the application
tabPanel("Impact of DRGs ",
# Create a sidebar with widgets that will modify the map
sidebarLayout(
#Sidebar containing input options
sidebarPanel(
# Select input for the DRGs
selectInput("drg_option_for_impact",
"Select a DRG",
hospital.data.drg$DRG.Definition,
selected = "039 - EXTRACRANIAL PROCEDURES W/O CC/MCC"),
# Select input for discharge visualization options
selectInput("discharge_visualization_option",
"Discharge data set to visualize",
choices = list("Total Discharges" = "Total.Discharges.For.State", "Approximate Percentage of Discharges for Population" = "impact.percentage.on.state", "Approximate State Population for 2011" = "population.estimate.2011", "Total Cases for every 100,000 people" = "impact.on.hundred.thousand"),
selected = "Total Discharges")),
#Main Panel to show data visualization
mainPanel(
# Show a map of each state and the average ratio between average covered charges and average total payment
plotlyOutput("choropleth_drg_impact_percentage"),
#Create discharge data table for drg selected
dataTableOutput("discharge_table")
))),
tabPanel('Medicare Gap',
#tab7-Muse, bigger gap between payment and medicare the bigger dot will be
#For government, to know which hospital need more assistance
sidebarLayout(
sidebarPanel(
selectInput('drg.select', label  = 'DRG: Diagnosis-Related Group',
choices = drgs$DRG.Definition)),
mainPanel(
plotlyOutput('drg.payment.medicare')
)
)),
navbarMenu("What's More",
#More information about us
#introduce our project
#1. what is DRG, where we got the data
#2. what is the purpose
#3. who is the audience
tabPanel("About Team Lays",
fluidRow(
column(3,
img(class = 'img-lays',
src = paste0('http://www.perspectivebranding.com/images/uploads/portfolio/_960/Global_Lays_SINGLE.jpg')),
tags$small(
'Things you need to know:',
"1. Picture source: you search Lays online and click the first picture",
'2. We were eatting Lays chips when we tried to make a team.',
"3. Do you wanna know how can we make such awesome website?",
"You Google it!"
)
))),
tabPanel('About the Project')
)))
runApp()
runApp()
runApp()
runApp()
runApp()
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
add_trace(y = ~y4.ave.payment.medicare.gap, name = 'Average.Payment.Medicare.Gap') %>%
#lable yaxis, determine the display mode of the bar chart
layout(title = 'Region Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = x.hospital.name),
barmode = 'group',autosize = F, width = 500,
height = 500, margin = m)
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
add_trace(y = ~y4.ave.payment.medicare.gap, name = 'Average.Payment.Medicare.Gap') %>%
#lable yaxis, determine the display mode of the bar chart
layout(title = 'Region Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = x.hospital.name),
barmode = 'group',
margin = list(b = 180)) %>%
layout(autosize = F, width = 500, height = 500, margin = m)
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
add_trace(y = ~y4.ave.payment.medicare.gap, name = 'Average.Payment.Medicare.Gap') %>%
#lable yaxis, determine the display mode of the bar chart
layout(title = 'Region Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = ~x.hospital.name),
barmode = 'group',
margin = list(b = 180)) %>%
layout(autosize = F, width = 500, height = 500, margin = m)
m <- list(
l = 50,
r = 50,
b = 100,
t = 100,
pad = 4
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tidy.source()
library(formatR)
tidy.source()
install.packages("formatR")
install.packages("formatR")
library(formatR)
tidy.source()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('dplyr')
install.packages("dplyr")
shiny::runApp()
runApp()
runApp()
