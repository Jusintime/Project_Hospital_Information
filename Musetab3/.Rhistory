y2.ave.total.payments <- as.numeric(hospital.data$Average.Total.Payments)
y3.ave.medicare.payments <- as.numeric(hospital.data$Average.Medicare.Payments)
y4.ave.payment.medicare.gap <- as.numeric(hospital.data$payment.medicare.gap)
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
add_trace(y = ~y4.ave.payment.medicare.gap, name = 'Average.Payment.Medicare.Gap')
#lable yaxis, determine the display mode of the bar chart
layout(title = 'City Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = x.hospital.name),
barmode = 'group')
bar.chart
hospital.data <- select(tab3.data,
DRG.Definition,
Provider.State,
Hospital.Referral.Region.Description,
Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)%>%
#select the information that is about the selected DRG
filter(DRG.Definition == drg.name)%>%
#select the information that is in the selected state
filter(Provider.State == state.name)%>%
#select the information that is in the selected region
filter(Hospital.Referral.Region.Description == region.name)%>%
#Output the information that we need
select(Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)
#the structure of x variable in plotly graph is character
#transform the hospital name column in the data frame that we find in the function into character
x.hospital.name <- as.character(hospital.data$Provider.Name)
#the structure of y variable in plotly graph is numeric
#transform the hospital name column in the data frame that we find in the function into numeric
y1.ave.covered.charges <- as.numeric(hospital.data$Average.Covered.Charges)
y2.ave.total.payments <- as.numeric(hospital.data$Average.Total.Payments)
y3.ave.medicare.payments <- as.numeric(hospital.data$Average.Medicare.Payments)
y4.ave.payment.medicare.gap <- as.numeric(hospital.data$payment.medicare.gap)
bar.chart.1 <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
add_trace(y = ~y4.ave.payment.medicare.gap, name = 'Average.Payment.Medicare.Gap')
#lable yaxis, determine the display mode of the bar chart
layout(title = 'City Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = x.hospital.name),
barmode = 'group')
bar.chart
library(plotly)
library(stringr)
library(dplyr)
hospital.data <- select(tab3.data,
DRG.Definition,
Provider.State,
Hospital.Referral.Region.Description,
Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)%>%
#select the information that is about the selected DRG
filter(DRG.Definition == drg.name)%>%
#select the information that is in the selected state
filter(Provider.State == state.name)%>%
#select the information that is in the selected region
filter(Hospital.Referral.Region.Description == region.name)%>%
#Output the information that we need
select(Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)
#the structure of x variable in plotly graph is character
#transform the hospital name column in the data frame that we find in the function into character
x.hospital.name <- as.character(hospital.data$Provider.Name)
#the structure of y variable in plotly graph is numeric
#transform the hospital name column in the data frame that we find in the function into numeric
y1.ave.covered.charges <- as.numeric(hospital.data$Average.Covered.Charges)
y2.ave.total.payments <- as.numeric(hospital.data$Average.Total.Payments)
y3.ave.medicare.payments <- as.numeric(hospital.data$Average.Medicare.Payments)
y4.ave.payment.medicare.gap <- as.numeric(hospital.data$payment.medicare.gap)
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
add_trace(y = ~y4.ave.payment.medicare.gap, name = 'Average.Payment.Medicare.Gap')
#lable yaxis, determine the display mode of the bar chart
layout(title = 'City Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = x.hospital.name),
barmode = 'group')
#select the information that we need
hospital.data <- select(tab3.data,
DRG.Definition,
Provider.State,
Hospital.Referral.Region.Description,
Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)%>%
#select the information that is about the selected DRG
filter(DRG.Definition == drg.name)%>%
#select the information that is in the selected state
filter(Provider.State == state.name)%>%
#select the information that is in the selected region
filter(Hospital.Referral.Region.Description == region.name)%>%
#Output the information that we need
select(Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)
#the structure of x variable in plotly graph is character
#transform the hospital name column in the data frame that we find in the function into character
x.hospital.name <- as.character(hospital.data$Provider.Name)
#the structure of y variable in plotly graph is numeric
#transform the hospital name column in the data frame that we find in the function into numeric
y1.ave.covered.charges <- as.numeric(hospital.data$Average.Covered.Charges)
y2.ave.total.payments <- as.numeric(hospital.data$Average.Total.Payments)
y3.ave.medicare.payments <- as.numeric(hospital.data$Average.Medicare.Payments)
y4.ave.payment.medicare.gap <- as.numeric(hospital.data$payment.medicare.gap)
bar.chart.1 <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
add_trace(y = ~y4.ave.payment.medicare.gap, name = 'Average.Payment.Medicare.Gap') %>%
#lable yaxis, determine the display mode of the bar chart
layout(title = 'City Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = x.hospital.name),
barmode = 'group')
bar.chart
#select the information that we need
hospital.data <- select(tab3.data,
DRG.Definition,
Provider.State,
Hospital.Referral.Region.Description,
Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)%>%
#select the information that is about the selected DRG
filter(DRG.Definition == drg.name)%>%
#select the information that is in the selected state
filter(Provider.State == state.name)%>%
#select the information that is in the selected region
filter(Hospital.Referral.Region.Description == region.name)%>%
#Output the information that we need
select(Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)
#the structure of x variable in plotly graph is character
#transform the hospital name column in the data frame that we find in the function into character
x.hospital.name <- as.character(hospital.data$Provider.Name)
#the structure of y variable in plotly graph is numeric
#transform the hospital name column in the data frame that we find in the function into numeric
y1.ave.covered.charges <- as.numeric(hospital.data$Average.Covered.Charges)
y2.ave.total.payments <- as.numeric(hospital.data$Average.Total.Payments)
y3.ave.medicare.payments <- as.numeric(hospital.data$Average.Medicare.Payments)
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
#lable yaxis, determine the display mode of the bar chart
layout(title = 'City Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = x.hospital.name),
barmode = 'group')
bar.chart
hospital.data <- select(tab3.data,
DRG.Definition,
Provider.State,
Hospital.Referral.Region.Description,
Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)%>%
#select the information that is about the selected DRG
filter(DRG.Definition == drg.name)%>%
#select the information that is in the selected state
filter(Provider.State == state.name)%>%
#select the information that is in the selected region
filter(Hospital.Referral.Region.Description == region.name)%>%
#Output the information that we need
select(Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)
#the structure of x variable in plotly graph is character
#transform the hospital name column in the data frame that we find in the function into character
x.hospital.name <- as.character(hospital.data$Provider.Name)
#the structure of y variable in plotly graph is numeric
#transform the hospital name column in the data frame that we find in the function into numeric
y1.ave.covered.charges <- as.numeric(hospital.data$Average.Covered.Charges)
y2.ave.total.payments <- as.numeric(hospital.data$Average.Total.Payments)
y3.ave.medicare.payments <- as.numeric(hospital.data$Average.Medicare.Payments)
y4.ave.payment.medicare.gap <- payment.medicare.gap
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
add_trace(y = ~y4.ave.payment.medicare.gap, name = 'Average.Payment.Medicare.Gap') %>%
#lable yaxis, determine the display mode of the bar chart
layout(title = 'City Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = x.hospital.name),
barmode = 'group')
bar.chart
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')
bar.chart
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
add_trace(y = ~y4.ave.payment.medicare.gap, name = 'Average.Payment.Medicare.Gap')
bar.chart
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')
bar.chart
tab3.data$payment.medicare.gap <- as.numeric(tab3.data$Average.Total.Payments) - as.numeric(tab3.data$Average.Medicare.Payments)
y4.ave.payment.medicare.gap <- payment.medicare.gap
y4.ave.payment.medicare.gap <- payment.medicare.gap
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
add_trace(y = ~y4.ave.payment.medicare.gap, name = 'Average.Payment.Medicare.Gap') %>%
#lable yaxis, determine the display mode of the bar chart
layout(title = 'City Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = x.hospital.name),
barmode = 'group')
bar.chart
library(plotly)
library(stringr)
library(dplyr)
patient.data <- read.csv('patient_data.csv', stringsAsFactors = F)
#tab3.data will be used in this function. So that original data which is patient.data will not be changed
tab3.data <- patient.data
#we subsitude the $ sign by blank space in order to put the only number in the dataset
tab3.data$Average.Covered.Charges <- lapply(tab3.data$Average.Covered.Charges,
function(x)as.numeric(gsub("[,$]","",x)))
tab3.data$Average.Total.Payments <- lapply(tab3.data$Average.Total.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
tab3.data$Average.Medicare.Payments <- lapply(tab3.data$Average.Medicare.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
#This column gives the information that an elderly who has medicare needs to pay
#The amount of money = total payment - medicare
tab3.data$payment.medicare.gap <- as.numeric(tab3.data$Average.Total.Payments) - as.numeric(tab3.data$Average.Medicare.Payments)
hospital.data <- select(tab3.data,
DRG.Definition,
Provider.State,
Hospital.Referral.Region.Description,
Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)%>%
#select the information that is about the selected DRG
filter(DRG.Definition == drg.name)%>%
#select the information that is in the selected state
filter(Provider.State == state.name)%>%
#select the information that is in the selected region
filter(Hospital.Referral.Region.Description == region.name)%>%
#Output the information that we need
select(Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)
#the structure of x variable in plotly graph is character
#transform the hospital name column in the data frame that we find in the function into character
x.hospital.name <- as.character(hospital.data$Provider.Name)
#the structure of y variable in plotly graph is numeric
#transform the hospital name column in the data frame that we find in the function into numeric
y1.ave.covered.charges <- as.numeric(hospital.data$Average.Covered.Charges)
y2.ave.total.payments <- as.numeric(hospital.data$Average.Total.Payments)
y3.ave.medicare.payments <- as.numeric(hospital.data$Average.Medicare.Payments)
y4.ave.payment.medicare.gap <- payment.medicare.gap
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
add_trace(y = ~y4.ave.payment.medicare.gap, name = 'Average.Payment.Medicare.Gap') %>%
#lable yaxis, determine the display mode of the bar chart
layout(title = 'City Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = x.hospital.name),
barmode = 'group')
bar
bar.chart
View(tab3.data)
View(hospital.data)
y4.ave.payment.medicare.gap <- hospital.data$payment.medicare.gap
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
add_trace(y = ~y4.ave.payment.medicare.gap, name = 'Average.Payment.Medicare.Gap') %>%
#lable yaxis, determine the display mode of the bar chart
layout(title = 'City Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = x.hospital.name),
barmode = 'group')
bar.chart
shiny::runApp()
runApp()
runApp()
#select the information that we need
hospital.data <- select(tab3.data,
DRG.Definition,
Provider.State,
Hospital.Referral.Region.Description,
Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)%>%
#select the information that is in the selected state
filter(Provider.State == state.name)%>%
#select the information that is in the selected region
filter(Hospital.Referral.Region.Description == region.name)%>%
#select the information that is about the selected DRG
filter(DRG.Definition == drg.name)%>%
#Output the information that we need
select(Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)
#the structure of x variable in plotly graph is character
#transform the hospital name column in the data frame that we find in the function into character
x.hospital.name <- as.character(hospital.data$Provider.Name)
#the structure of y variable in plotly graph is numeric
#transform the hospital name column in the data frame that we find in the function into numeric
y1.ave.covered.charges <- as.numeric(hospital.data$Average.Covered.Charges)
y2.ave.total.payments <- as.numeric(hospital.data$Average.Total.Payments)
y3.ave.medicare.payments <- as.numeric(hospital.data$Average.Medicare.Payments)
y4.ave.payment.medicare.gap <- hospital.data$payment.medicare.gap
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
add_trace(y = ~y4.ave.payment.medicare.gap, name = 'Average.Payment.Medicare.Gap') %>%
#lable yaxis, determine the display mode of the bar chart
layout(title = 'City Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = x.hospital.name),
barmode = 'group')
bar.chart
runApp()
Build.bar.chart <- function(state.name, region.name, drg.name){
#select the information that we need
hospital.data <- select(tab3.data,
DRG.Definition,
Provider.State,
Hospital.Referral.Region.Description,
Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)%>%
#select the information that is in the selected state
filter(Provider.State == state.name)%>%
#select the information that is in the selected region
filter(Hospital.Referral.Region.Description == region.name)%>%
#select the information that is about the selected DRG
filter(DRG.Definition == drg.name)%>%
#Output the information that we need
select(Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)
#the structure of x variable in plotly graph is character
#transform the hospital name column in the data frame that we find in the function into character
x.hospital.name <- as.character(hospital.data$Provider.Name)
#the structure of y variable in plotly graph is numeric
#transform the hospital name column in the data frame that we find in the function into numeric
y1.ave.covered.charges <- as.numeric(hospital.data$Average.Covered.Charges)
y2.ave.total.payments <- as.numeric(hospital.data$Average.Total.Payments)
y3.ave.medicare.payments <- as.numeric(hospital.data$Average.Medicare.Payments)
y4.ave.payment.medicare.gap <- hospital.data$payment.medicare.gap
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
add_trace(y = ~y4.ave.payment.medicare.gap, name = 'Average.Payment.Medicare.Gap') %>%
#lable yaxis, determine the display mode of the bar chart
layout(title = 'City Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = x.hospital.name),
barmode = 'group')
return(bar.chart)}
runApp()
runApp()
runApp()
runApp()
View(tab3.data)
runApp()
locate.region('AL')
state <- 'WA'
region.locate <- tab3.data %>%
ungroup() %>%
select(Provider.State, Hospital.Referral.Region.Description) %>%
distinct(Provider.State, Hospital.Referral.Region.Description) %>%
filter(Provider.State == state) %>%
select(Hospital.Referral.Region.Description)
region.locate
region <- 'WA - Seattle'
drg.locate <- tab3.data %>%
ungroup() %>%
select(Hospital.Referral.Region.Description, DRG.Definition) %>%
distinct(Hospital.Referral.Region.Description, DRG.Definition) %>%
filter(Hospital.Referral.Region.Description == region) %>%
select(DRG.Definition)
drg.locate
states <- tab3.data %>%
select(Provider.State) %>%
distinct(Provider.State)
states
states$Provider.State
runApp()
runApp()
locate.drg("WA-SEATTLE")
locate.drg('WA - Seattle')
runApp()
drg.name <- c('064 - INTRACRANIAL HEMORRHAGE OR CEREBRAL INFARCTION W MCC')
hospital.data <- select(tab3.data,
DRG.Definition,
Provider.State,
Hospital.Referral.Region.Description,
Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap) %>%
#select the information that is in the selected state
filter(Provider.State == state.name) %>%
#select the information that is in the selected region
filter(Hospital.Referral.Region.Description == region.name) %>%
#select the information that is about the selected DRG
filter(DRG.Definition == drg.name) %>%
#Output the information that we need
select(Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)
#the structure of x variable in plotly graph is character
#transform the hospital name column in the data frame that we find in the function into character
x.hospital.name <- as.character(hospital.data$Provider.Name)
#the structure of y variable in plotly graph is numeric
#transform the hospital name column in the data frame that we find in the function into numeric
y1.ave.covered.charges <- as.numeric(hospital.data$Average.Covered.Charges)
y2.ave.total.payments <- as.numeric(hospital.data$Average.Total.Payments)
y3.ave.medicare.payments <- as.numeric(hospital.data$Average.Medicare.Payments)
y4.ave.payment.medicare.gap <- hospital.data$payment.medicare.gap
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
add_trace(y = ~y4.ave.payment.medicare.gap, name = 'Average.Payment.Medicare.Gap') %>%
#lable yaxis, determine the display mode of the bar chart
layout(title = 'City Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = x.hospital.name),
barmode = 'group')
bar.chart
runApp()
