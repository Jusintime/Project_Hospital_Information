#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
#lable yaxis, determine the display mode of the bar chart
layout(title = 'City Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = x.hospital.name),
barmode = 'group')
bar.chart
Provider.City.dataframe <- as.data.frame(patient.data[,5], drop = FALSE)
Provider.City.vector <- as.vector(Provider.City.dataframe)
runApp()
runApp()
runApp()
Provider.City.vector <- as.list(Provider.City.dataframe)
runApp()
View(tab3.data)
View(tab3.data)
View(tab3.data)
View(tab3.data)
View(tab3.data)
View(tab3.data)
View(tab3.data)
View(tab3.data)
View(tab3.data)
View(tab3.data)
View(tab3.data)
patient.data <- read.csv('patient_data.csv', stringsAsFactors = F)
View(patient.data)
library(plotly)
d <- diamonds[sample(nrow(diamonds), 1000), ]
p <- plot_ly(
d, x = ~carat, y = ~price,
# Hover text:
text = ~paste("Price: ", price, '$<br>Cut:', cut),
color = ~carat, size = ~carat
)
p
d
View(d)
str(d)
class(d)
class(tab3.data)
drg.name <- c('039 - EXTRACRANIAL PROCEDURES W/O CC/MCC')
city.name <- c('SEATTLE')
state.name <- c('WA')
patient.data <- read.csv('patient_data.csv', stringsAsFactors = F)
#tab3.data will be used in this function. So that original data which is patient.data will not be changed
tab3.data <- patient.data
#we subsitude the $ sign by blank space in order to put the only number in the dataset
tab3.data$Average.Covered.Charges <- lapply(tab3.data$Average.Covered.Charges,
function(x)as.numeric(gsub("[,$]","",x)))
tab3.data$Average.Total.Payments <- lapply(tab3.data$Average.Total.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
tab3.data$Average.Medicare.Payments <- lapply(tab3.data$Average.Medicare.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
#select the information that we need
hospital.data <- select(tab3.data,
DRG.Definition,
Provider.State,
Provider.City,
Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments)%>%
#select the information that is about the selected DRG
filter(DRG.Definition == drg.name)%>%
#select the information that is in the selected state
filter(Provider.State == state.name)%>%
#select the information that is in the selected city
filter(Provider.City == city.name)
#Output the information that we need
select(Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments)
#the structure of x variable in plotly graph is character
#transform the hospital name column in the data frame that we find in the function into character
x.hospital.name <- as.character(hospital.data$Provider.Name)
#the structure of y variable in plotly graph is numeric
#transform the hospital name column in the data frame that we find in the function into numeric
y1.ave.covered.charges <- as.numeric(hospital.data$Average.Covered.Charges)
y2.ave.total.payments <- as.numeric(hospital.data$Average.Total.Payments)
y3.ave.medicare.payments <- as.numeric(hospital.data$Average.Medicare.Payments)
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
#lable yaxis, determine the display mode of the bar chart
layout(title = 'City Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = x.hospital.name),
barmode = 'group')
colnames(tab3.data)
hospital.data <- select(tab3.data,
DRG.Definition,
Provider.State,
Provider.City,
Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments)%>%
#select the information that is about the selected DRG
filter(DRG.Definition == drg.name)%>%
#select the information that is in the selected state
filter(Provider.State == state.name)%>%
#select the information that is in the selected city
filter(Provider.City == city.name)
#Output the information that we need
select(Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments)
#the structure of x variable in plotly graph is character
#transform the hospital name column in the data frame that we find in the function into character
x.hospital.name <- as.character(hospital.data$Provider.Name)
#the structure of y variable in plotly graph is numeric
#transform the hospital name column in the data frame that we find in the function into numeric
y1.ave.covered.charges <- as.numeric(hospital.data$Average.Covered.Charges)
y2.ave.total.payments <- as.numeric(hospital.data$Average.Total.Payments)
y3.ave.medicare.payments <- as.numeric(hospital.data$Average.Medicare.Payments)
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
#lable yaxis, determine the display mode of the bar chart
layout(title = 'City Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = x.hospital.name),
barmode = 'group')
bar.chart
city.name <- c('LYNCHBURG')
state.name <- c('VA')
hospital.data <- select(tab3.data,
DRG.Definition,
Provider.State,
Provider.City,
Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments)%>%
#select the information that is about the selected DRG
filter(DRG.Definition == drg.name)%>%
#select the information that is in the selected state
filter(Provider.State == state.name)%>%
#select the information that is in the selected city
filter(Provider.City == city.name)
#Output the information that we need
select(Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments)
#the structure of x variable in plotly graph is character
#transform the hospital name column in the data frame that we find in the function into character
x.hospital.name <- as.character(hospital.data$Provider.Name)
#the structure of y variable in plotly graph is numeric
#transform the hospital name column in the data frame that we find in the function into numeric
y1.ave.covered.charges <- as.numeric(hospital.data$Average.Covered.Charges)
y2.ave.total.payments <- as.numeric(hospital.data$Average.Total.Payments)
y3.ave.medicare.payments <- as.numeric(hospital.data$Average.Medicare.Payments)
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
#lable yaxis, determine the display mode of the bar chart
layout(title = 'City Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = x.hospital.name),
barmode = 'group')
bar.chart
drg.name <- c('039 - EXTRACRANIAL PROCEDURES W/O CC/MCC')
tab7.data <- patient.data
#we subsitude the $ sign by blank space in order to put the only number in the dataset
tab7.data$Average.Total.Payments <- lapply(tab7.data$Average.Total.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
tab7.data$Average.Medicare.Payments <- lapply(tab7.data$Average.Medicare.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
#select the information that we need
hospital.data <- select(tab7.data,
DRG.Definition,
Provider.Name,
Average.Total.Payments,
Average.Medicare.Payments)%>%
#select the information that is about the selected DRC
filter(DRG.Definition == drg.name)%>%
#Output the information that we need
select(Provider.Name,
Average.Total.Payments,
Average.Medicare.Payments)
scatter.plot <- plot_ly(hospital.data,
x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~paste('Total Payment:', Average.Total.Payments,
'Medicare Coverage:', Average.Medicare.Payments,
'Hospital Name:', Provider.Name),
color = ~Average.Total.Payments, size = ~Average.Total.Payments)
scatter.plot
View(hospital.data)
scatter.plot <- plot_ly(hospital.data,
x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~paste('Total Payment:', Average.Total.Payments,
'Medicare Coverage:', Average.Medicare.Payments,
'Hospital Name:', Provider.Name))
scatter.plot
a <- hospital.data %>% filter(Provider.Name == 'LONG ISLAND JEWISH MEDICAL CENTER'
)
A
a
View(a)
scatter.plot <- plot_ly(hospital.data,
x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~paste('Total Payment:', Average.Total.Payments,
'Medicare Coverage:', Average.Medicare.Payments,
'Hospital Name:', Provider.Name),
color = ~Average.Total.Payments, size = ~Average.Total.Payments)
scatter.plot
scatter.plot <- plot_ly(hospital.data,
x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~paste('Total Payment:', Average.Total.Payments,
'Medicare Coverage:', Average.Medicare.Payments,
'Hospital Name:', Provider.Name),
color = ~carat, size = ~carat)
scatter.plot
scatter.plot <- plot_ly(hospital.data,
x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~paste('Total Payment:', Average.Total.Payments,
'Medicare Coverage:', Average.Medicare.Payments,
'Hospital Name:', Provider.Name),
color = ~Average.Total.Payments, size = ~Average.Total.Payments)
scatter.plot
d <- diamonds[sample(nrow(diamonds), 1000), ]
p <- plot_ly(
d, x = ~carat, y = ~price,
# Hover text:
text = ~paste("Price: ", price, '$<br>Cut:', cut),
color = ~carat, size = ~carat
)
p
str(carat)
scatter.plot <- plot_ly(hospital.data,
x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~paste('Total Payment:', Average.Total.Payments,
'Medicare Coverage:', Average.Medicare.Payments,
'Hospital Name:', Provider.Name),
color = ~Average.Total.Payments)
scatter.plot
scatter.plot <- plot_ly(hospital.data,
x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~paste('Total Payment:', Average.Total.Payments,
'Medicare Coverage:', Average.Medicare.Payments,
'Hospital Name:', Provider.Name),
color = ~Average.Medicare.Payments, size = ~Average.Total.Payments)
scatter.plot
scatter.plot <- plot_ly(hospital.data,
x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~paste('Total Payment:', Average.Total.Payments,
'Medicare Coverage:', Average.Medicare.Payments,
'Hospital Name:', Provider.Name),
color = ~red)
scatter.plot
p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Species)
p
scatter.plot <- plot_ly(hospital.data,
x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~paste('Total Payment:', Average.Total.Payments,
'Medicare Coverage:', Average.Medicare.Payments,
'Hospital Name:', Provider.Name),
mode = 'markers', colors = 'Paired')
scatter.plot
p <- plot_ly(data, x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~paste('Total Payment:', Average.Total.Payments,
'Medicare Coverage:', Average.Medicare.Payments,
'Hospital Name:', Provider.Name),
type = 'scatter',
mode = 'markers',
color = ~Provider.Name,
colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Hosipital Information',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
p <- plot_ly(tab7.data), x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~paste('Total Payment:', Average.Total.Payments,
'Medicare Coverage:', Average.Medicare.Payments,
'Hospital Name:', Provider.Name),
type = 'scatter',
mode = 'markers',
color = ~Provider.Name,
colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Hosipital Information',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
p <- plot_ly(tab7.data), x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~Provider.Name,
type = 'scatter',
mode = 'markers',
color = ~Provider.Name,
colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Hosipital Information',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
library(plotly)
library(stringr)
library(dplyr)
p <- plot_ly(tab7.data), x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~Provider.Name,
type = 'scatter',
mode = 'markers',
color = ~Provider.Name,
colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Hosipital Information',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
View(tab3.data)
View(tab3.data)
shiny::runApp()
drg.name <- c('039 - EXTRACRANIAL PROCEDURES W/O CC/MCC')
city.name <- c('SEATTLE')
state.name <- c('WA')
tab3.data <- patient.data
#we subsitude the $ sign by blank space in order to put the only number in the dataset
tab3.data$Average.Covered.Charges <- lapply(tab3.data$Average.Covered.Charges,
function(x)as.numeric(gsub("[,$]","",x)))
tab3.data$Average.Total.Payments <- lapply(tab3.data$Average.Total.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
tab3.data$Average.Medicare.Payments <- lapply(tab3.data$Average.Medicare.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
#select the information that we need
hospital.data <- select(tab3.data,
DRG.Definition,
Provider.State,
Provider.City,
Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments)%>%
#select the information that is about the selected DRG
filter(DRG.Definition == drg.name)%>%
#select the information that is in the selected state
filter(Provider.State == state.name)%>%
#select the information that is in the selected city
filter(Provider.City == city.name)%>%
#Output the information that we need
select(Provider.Name,
Average.Covered.Charges,
Average.Total.Payments,
Average.Medicare.Payments)
#the structure of x variable in plotly graph is character
#transform the hospital name column in the data frame that we find in the function into character
x.hospital.name <- as.character(hospital.data$Provider.Name)
#the structure of y variable in plotly graph is numeric
#transform the hospital name column in the data frame that we find in the function into numeric
y1.ave.covered.charges <- as.numeric(hospital.data$Average.Covered.Charges)
y2.ave.total.payments <- as.numeric(hospital.data$Average.Total.Payments)
y3.ave.medicare.payments <- as.numeric(hospital.data$Average.Medicare.Payments)
bar.chart <- plot_ly(x = ~x.hospital.name, y = ~y1.ave.covered.charges,
type = "bar", name = 'Average.Covered.Charges')%>%
#add Average.Total.Payments information
add_trace(y = ~y2.ave.total.payments, name = 'Average.Total.Payments')%>%
#add Average.Medicare.Payments information
add_trace(y = ~y3.ave.medicare.payments, name = 'Average.Medicare.Payments')%>%
#lable yaxis, determine the display mode of the bar chart
layout(title = 'City Hospital Information',
yaxis = list(title = 'Amount of Money'),
xaxis = list(title = x.hospital.name),
barmode = 'group')
bar.chart
runApp()
drg.name <- c('039 - EXTRACRANIAL PROCEDURES W/O CC/MCC')
tab7.data <- patient.data
#we subsitude the $ sign by blank space in order to put the only number in the dataset
tab7.data$Average.Total.Payments <- lapply(tab7.data$Average.Total.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
tab7.data$Average.Medicare.Payments <- lapply(tab7.data$Average.Medicare.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
tab7.data$payment.medicare.gap <- as.numeric(tab7.data$Average.Total.Payments) - as.numeric(tab7.data$Average.Medicare.Payments)
#select the information that we need
hospital.data <- select(tab7.data,
DRG.Definition,
Provider.Name,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)%>%
#select the information that is about the selected DRC
filter(DRG.Definition == drg.name)%>%
#Output the information that we need
select(Provider.Name,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)
#make a scatter plot
scatter.plot <- plot_ly(hospital.data,
x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~paste('Total Payment:', Average.Total.Payments,
'Medicare Coverage:', Average.Medicare.Payments,
'Hospital Name:', Provider.Name),
color = ~payment.medicare.gap,
size = ~payment.medicare.gap)
scatter.plot
runApp('~/2016Fall_INFO201/Project_Hospital_Information/Musetab7')
runApp('~/2016Fall_INFO201/Project_Hospital_Information/Musetab7')
drg.name <- c('039 - EXTRACRANIAL PROCEDURES W/O CC/MCC')
patient.data <- read.csv('patient_data.csv', stringsAsFactors = F)
tab7.data <- patient.data
#we subsitude the $ sign by blank space in order to put the only number in the dataset
tab7.data$Average.Total.Payments <- lapply(tab7.data$Average.Total.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
tab7.data$Average.Medicare.Payments <- lapply(tab7.data$Average.Medicare.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
tab7.data$payment.medicare.gap <- as.numeric(tab7.data$Average.Total.Payments) - as.numeric(tab7.data$Average.Medicare.Payments)
#select the information that we need
hospital.data <- select(tab7.data,
DRG.Definition,
Provider.Name,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)%>%
#select the information that is about the selected DRC
filter(DRG.Definition == drg.name)%>%
#Output the information that we need
select(Provider.Name,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)
#make a scatter plot
scatter.plot <- plot_ly(hospital.data,
x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~paste('Total Payment:', Average.Total.Payments,
'Medicare Coverage:', Average.Medicare.Payments,
'Hospital Name:', Provider.Name),
color = ~payment.medicare.gap,
size = ~payment.medicare.gap)
library(plotly)
library(stringr)
library(dplyr)
tab7.data <- patient.data
#we subsitude the $ sign by blank space in order to put the only number in the dataset
tab7.data$Average.Total.Payments <- lapply(tab7.data$Average.Total.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
tab7.data$Average.Medicare.Payments <- lapply(tab7.data$Average.Medicare.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
tab7.data$payment.medicare.gap <- as.numeric(tab7.data$Average.Total.Payments) - as.numeric(tab7.data$Average.Medicare.Payments)
#select the information that we need
hospital.data <- select(tab7.data,
DRG.Definition,
Provider.Name,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)%>%
#select the information that is about the selected DRC
filter(DRG.Definition == drg.name)%>%
#Output the information that we need
select(Provider.Name,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)
#make a scatter plot
scatter.plot <- plot_ly(hospital.data,
x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~paste('Total Payment:', Average.Total.Payments,
'Medicare Coverage:', Average.Medicare.Payments,
'Hospital Name:', Provider.Name),
color = ~payment.medicare.gap,
size = ~payment.medicare.gap)
scatter.plot
shiny::runApp('~/2016Fall_INFO201/Project_Hospital_Information/Musetab7')
runApp('~/2016Fall_INFO201/Project_Hospital_Information/Musetab7')
