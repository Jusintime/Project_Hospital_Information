length(chickwts$feed == 'casein')
length(chickwts$feed == 'linseed')
length(chickwts$feed == 'casein') == length(chickwts$feed == 'linseed')
length(chickwts$feed == 'casein')
length(chickwts$feed == 'linseed')
length(chickwts$feed == 'casein') == length(chickwts$feed == 'linseed')
Density.casein <- density(chickwts$feed == 'casein')
Density.linseed <- density(chickwts$feed == 'linseed')
plot(Density.linseed, main = 'Chickwts.Feed', bw = 30, col ='red',lwd = 3)
lines(Density.casein, col = 'green', lwd = 3, bw = 30)
legend('topright',c('linseed','casein'),col=c('red','green'),lwd=1,cex=0.8,bg='gray')
Density.casein <- density(chickwts$feed == 'casein')
Density.casein <- density(chickwts$weight[chickwts$feed] == 'casein')
Density.casein <- density(chickwts$weight[chickwts$feed] == 'casein')
Density.casein <- density(chickwts$weight[chickwts$feed] == 'casein'])
Density.casein <- density(chickwts$weight[chickwts$feed == 'casein'])
Density.linseed <- density(chickwts$weight[chickwts$feed == 'linseed'])
plot(Density.linseed, main = 'Chickwts.Feed', bw = 30, col ='red',lwd = 3)
lines(Density.casein, col = 'green', lwd = 3, bw = 30)
Density.casein <- density(chickwts$weight[chickwts$feed == 'casein'])
Density.linseed <- density(chickwts$weight[chickwts$feed == 'linseed'])
plot(Density.linseed, main = 'Chickwts.Feed', bandwidth = 30, col ='red',lwd = 3)
lines(Density.casein, col = 'green', lwd = 3, bandwidth = 30)
legend('topright',c('linseed','casein'),col=c('red','green'),lwd=1,cex=0.8,bg='gray')
Density.setosa <- density(iris$Sepal.Length[iris$Species == 'setosa'],  bw = 0.4, from = 4, to = 8)
Density.versicolor <- density(iris$Sepal.Length[iris$Species == 'versicolor'], bw = 0.4, from = 4, to = 8)
Density.virginica <- density(iris$Sepal.Length[iris$Species == 'virginica'], bw = 0.4, from = 4, to = 8)
plot(Density.setosa, main = 'Sepal.Length.Species' ,xlim = c(4,8), bw = 0.4, col ='red',lwd = 3)
lines(Density.versicolor, xlim = c(4,8),col = 'green', lwd = 3)
lines(Density.virginica, xlim = c(4,8),col = 'yellow', lwd = 3)
legend('topright',c('setosa','versicolor','virginica'),col=c('red','green','yellow'),lwd=1,cex=0.8,bg='gray')
Density.casein <- density(chickwts$weight[chickwts$feed == 'casein'])
data1 <- iris$Sepal.Length[iris$Species=="versicolor"]
data2 <- iris$Sepal.Length[iris$Species=="virginica"]
data1_den <- density(data1, from=4, to=8)
casein.data <- chickwts$weight[chickwts$feed == 'casein'])
linseed.data <- chickwts$weight[chickwts$feed == 'linseed'])
casein.data <- chickwts$weight[chickwts$feed == 'casein']
linseed.data <- chickwts$weight[chickwts$feed == 'linseed']
Density.casein<-density(casein.data)
Density.casein <- density(casein.data)
Density.linseed <- density(linseed.data)
setosa.data <- iris$Sepal.Length[iris$Species == 'setosa']
versicolor.data <- iris$Sepal.Length[iris$Species == 'versicolor']
virginica.data <- iris$Sepal.Length[iris$Species == 'virginica']
Density.setosa <- density(setosa.data, bw = 0.4, from = 4, to = 8)
Density.versicolor <- density(versicolor.data, bw = 0.4, from = 4, to = 8)
Density.virginica <- density(virginica.data, bw = 0.4, from = 4, to = 8)
plot(Density.setosa, main = 'Sepal.Length.Species' ,xlim = c(4,8), bw = 0.4, col ='red',lwd = 3)
lines(Density.versicolor, xlim = c(4,8),col = 'green', lwd = 3)
lines(Density.virginica, xlim = c(4,8),col = 'yellow', lwd = 3)
legend('topright',c('setosa','versicolor','virginica'),col=c('red','green','yellow'),lwd=1,cex=0.8,bg='gray')
plot(Density.setosa, main = 'Sepal.Length.Species', col ='red',lwd = 3)
data1 <- iris$Sepal.Length[iris$Species=="versicolor"]
data2 <- iris$Sepal.Length[iris$Species=="virginica"]
data1_den <- density(data1, from=4, to=8)
data2_den <- density(data2, from=4, to=8)
## p16
plot(data1_den, col="royalblue",lwd=4,
main="Iris data, Sepal.Length distribution",
xlab="Sepal.Length")
lines(data2_den, col="orange",lwd=4)
plot(Density.setosa, main = 'Sepal.Length.Species', col ='red', lwd = 3)
lines(Density.versicolor, xlim = c(4,8),col = 'green', lwd = 3)
lines(Density.virginica, xlim = c(4,8),col = 'yellow', lwd = 3)
legend('topright',c('setosa','versicolor','virginica'),col=c('red','green','yellow'),lwd=1,cex=0.8,bg='gray')
plot(Density.casein, col = 'orange', lwd = 4,
main = 'Chickwts.feed')
casein.data <- chickwts$weight[chickwts$feed == 'casein']
linseed.data <- chickwts$weight[chickwts$feed == 'linseed']
Density.casein <- density(casein.data)
Density.linseed <- density(linseed.data)
plot(Density.casein, col = 'orange', lwd = 4,
main = 'Chickwts.feed')
lines(Density.linseed, col = 'royalblue', lwd = 4)
col = c('orange', 'royalblue'), lwd = 6, cex = 1.5)
legend('topleft', c('casein', 'linseed'),
col = c('orange', 'royalblue'), lwd = 6, cex = 1.5)
legend('topright', c('casein', 'linseed'),
col = c('orange', 'royalblue'), lwd = 2, cex = 1.5)
legend('topright', c('casein', 'linseed'),
col = c('orange', 'royalblue'), lwd = 6, cex = 0.5)
legend('topright', c('casein', 'linseed'),
col = c('orange', 'royalblue'), lwd = 6, cex = 1)
plot(Density.casein, col = 'orange', lwd = 4,
main = 'Chickwts.feed', ylim = c(0,1))
plot(Density.casein, col = 'orange', lwd = 4,
main = 'Chickwts.feed', ylim = c(0,0.1))
plot(Density.casein, col = 'orange', lwd = 4,
main = 'Chickwts.feed', ylim = c(0,0.01))
lines(Density.linseed, col = 'royalblue', lwd = 4)
plot(Density.casein, col = 'orange', lwd = 4,
main = 'Chickwts.feed', ylim = c(0,0.07))
lines(Density.linseed, col = 'royalblue', lwd = 4)
plot(Density.casein, col = 'orange', lwd = 4,
main = 'Chickwts.feed', ylim = c(0,0.007))
lines(Density.linseed, col = 'royalblue', lwd = 4)
legend('topright', c('casein', 'linseed'),
col = c('orange', 'royalblue'), lwd = 6, cex = 1)
legend('topright',c('setosa','versicolor','virginica'),col=c('red','green','yellow'),lwd=6,cex=0.8,bg='gray')
setosa.data <- iris$Sepal.Length[iris$Species == 'setosa']
versicolor.data <- iris$Sepal.Length[iris$Species == 'versicolor']
Density.setosa <- density(setosa.data, bw = 0.4, from = 4, to = 8)
virginica.data <- iris$Sepal.Length[iris$Species == 'virginica']
Density.versicolor <- density(versicolor.data, bw = 0.4, from = 4, to = 8)
Density.virginica <- density(virginica.data, bw = 0.4, from = 4, to = 8)
plot(Density.setosa, main = 'Sepal.Length.Species', col ='red', lwd = 3)
lines(Density.versicolor, xlim = c(4,8),col = 'green', lwd = 3)
lines(Density.virginica, xlim = c(4,8),col = 'yellow', lwd = 3)
legend('topright',c('setosa','versicolor','virginica'),col=c('red','green','yellow'),lwd=6,cex=0.8,bg='gray')
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
library(shiny)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
runApp('INFO_201/a8-building-apps-HeyMuse/INFO201a8')
runApp('INFO_201/a8-building-apps-HeyMuse/INFO201a8')
input
runApp('INFO_201/a8-building-apps-HeyMuse/INFO201a8')
runApp('INFO_201/a8-building-apps-HeyMuse/INFO201a8')
runApp('INFO_201/a8-building-apps-HeyMuse/INFO201a8')
mapvar
runApp('INFO_201/a8-building-apps-HeyMuse/INFO201a8')
runApp('INFO_201/m14-shiny/exercise-3')
runApp('INFO_201/m14-shiny/exercise-3')
runApp('INFO_201/m14-shiny/exercise-3')
shiny::runApp('2016Fall_INFO201/Project_Hospital_Information/Musetap3')
runApp('2016Fall_INFO201/Project_Hospital_Information/Musetap3')
runApp('2016Fall_INFO201/Project_Hospital_Information/Musetap3')
tap7.data <- read.csv('patient_data.csv')
setwd("~/2016Fall_INFO201/Project_Hospital_Information/Musetap7")
tap7.data <- read.csv('patient_data.csv')
a <- c('2')
library(dplyr)
a1 <- tap7.data %>% filter(DRG.Definition == 'NORMAL NEWBORN')
setwd("~/2016Fall_INFO201/Project_Hospital_Information/Musetap7")
a1
a1 <- tap7.data %>% filter(DRG.Definition == 'VAGINAL DELIVERY W/O COMPLICATING DIAGNOSES')
a1
a1 <- tap7.data %>% filter(DRG.Definition == 'SEPTICEMIA OR SEVERE SEPSIS W/O MV 96+ HOURS W MCC')
a1
a1 <- tap7.data %>% filter(DRG.Definition == 'CESAREAN SECTION W/O CC/MCC')
a1
View(tap7.data)
p <- plot_ly(tab7.data, x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~Provider.Name,
type = 'scatter',
mode = 'markers',
color = ~Provider.Name,
colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Hosipital Information',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
library(plotly)
library(stringr)
library(dplyr)
p <- plot_ly(tab7.data, x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~Provider.Name,
type = 'scatter',
mode = 'markers',
color = ~Provider.Name,
colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Hosipital Information',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
patient.data <- read.csv('patient_data.csv', stringsAsFactors = F)
tab7.data$Average.Total.Payments <- lapply(tab7.data$Average.Total.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
tab7.data$Average.Medicare.Payments <- lapply(tab7.data$Average.Medicare.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
tab7.data <- patient.data
tab7.data$Average.Total.Payments <- lapply(tab7.data$Average.Total.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
tab7.data$Average.Medicare.Payments <- lapply(tab7.data$Average.Medicare.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
p <- plot_ly(tab7.data, x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~Provider.Name,
type = 'scatter',
mode = 'markers',
color = ~Provider.Name,
colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Hosipital Information',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
p
d <- diamonds[sample(nrow(diamonds), 1000), ]
p <- plot_ly(
d, x = ~carat, y = ~price,
# Hover text:
text = ~paste("Price: ", price, '$<br>Cut:', cut),
color = ~carat, size = ~carat
)
p
scatter.plot <- plot_ly(hospital.data,
x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~paste('Total Payment:', Average.Total.Payments,
'Medicare Coverage:', Average.Medicare.Payments,
'Hospital Name:', Provider.Name))
hospital.data <- select(tab7.data,
DRG.Definition,
Provider.Name,
Average.Total.Payments,
Average.Medicare.Payments)%>%
#select the information that is about the selected DRC
filter(DRG.Definition == drg.name)%>%
#Output the information that we need
select(Provider.Name,
Average.Total.Payments,
Average.Medicare.Payments)
drg.name <- c('039 - EXTRACRANIAL PROCEDURES W/O CC/MCC')
hospital.data <- select(tab7.data,
DRG.Definition,
Provider.Name,
Average.Total.Payments,
Average.Medicare.Payments)%>%
#select the information that is about the selected DRC
filter(DRG.Definition == drg.name)%>%
#Output the information that we need
select(Provider.Name,
Average.Total.Payments,
Average.Medicare.Payments)
scatter.plot <- plot_ly(hospital.data,
x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~paste('Total Payment:', Average.Total.Payments,
'Medicare Coverage:', Average.Medicare.Payments,
'Hospital Name:', Provider.Name))
scatter.plot
str(hospital.data$Provider.Name)
Provider.Name.factor <- as.factor(hospital.data$Provider.Name)
p <- plot_ly(tab7.data,
x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~Provider.Name,
type = 'scatter',
mode = 'markers',
color = ~Provider.Name.factor,
colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Hosipital Information',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
p
data <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv")
data$State <- as.factor(c('Massachusetts', 'California', 'Massachusetts', 'Pennsylvania', 'New Jersey', 'Illinois', 'Washington DC',
'Massachusetts', 'Connecticut', 'New York', 'North Carolina', 'New Hampshire', 'New York', 'Indiana',
'New York', 'Michigan', 'Rhode Island', 'California', 'Georgia', 'California', 'California'))
p <- plot_ly(data, x = ~Women, y = ~Men, text = ~School, type = 'scatter', mode = 'markers', size = ~gap, color = ~State, colors = 'Paired',
#Choosing the range of the bubbles' sizes:
sizes = c(10, 50),
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
p
Provider.Name.factor <- as.factor(hospital.data$Provider.Name)
p <- plot_ly(tab7.data,
x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~Provider.Name,
type = 'scatter',
mode = 'markers',
color = ~Provider.Name.factor,
colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Hosipital Information',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
p
View(data)
colnames(tab7.data)
p <- plot_ly(tab7.data, x = ~Average.Total.Payments, y = ~Average.Medicare.Payments, text = ~Provider.Name, type = 'scatter', mode = 'markers', size = 3, color = ~Provider.Name, colors = 'Paired',
#Choosing the range of the bubbles' sizes:
sizes = c(10, 50),
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
p
payment.medicare.gap <- tab7.data$Average.Total.Payments - tab7.data$Average.Medicare.Payments
payment.medicare.gap <- as.numeric(tab7.data$Average.Total.Payments) - as.numeric(tab7.data$Average.Medicare.Payments)
tab.data$payment.medicare.gap <- as.numeric(tab7.data$Average.Total.Payments) - as.numeric(tab7.data$Average.Medicare.Payments)
tab7.data$payment.medicare.gap <- as.numeric(tab7.data$Average.Total.Payments) - as.numeric(tab7.data$Average.Medicare.Payments)
p <- plot_ly(data, x = ~Average.Total.Payments, y = ~Average.Medicare.Payments, text = ~Provider.Name,
type = 'scatter', mode = 'markers', size = ~payment.medicare.gap, color = ~Provider.Name.factor, colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Hospital Information',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
p
tab7.data$payment.medicare.gap <- as.numeric(tab7.data$Average.Total.Payments) - as.numeric(tab7.data$Average.Medicare.Payments)
#select the information that we need
hospital.data <- select(tab7.data,
DRG.Definition,
Provider.Name,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)%>%
#select the information that is about the selected DRC
filter(DRG.Definition == drg.name)%>%
#Output the information that we need
select(Provider.Name,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)
p <- plot_ly(tab7.data, x = ~Average.Total.Payments, y = ~Average.Medicare.Payments, text = ~Provider.Name,
type = 'scatter', mode = 'markers', size = 3, color = ~Provider.Name, colors = 'Paired',
#Choosing the range of the bubbles' sizes:
sizes = c(10, 50),
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
p
p <- plot_ly(tab7.data, x = ~Average.Total.Payments, y = ~Average.Medicare.Payments,
text = ~Provider.Name, type = 'scatter', mode = 'markers',
size = ~payment.medicare.gap, color = ~Provider.Name, colors = 'Paired',
#Choosing the range of the bubbles' sizes:
sizes = c(10, 50),
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
p
p <- plot_ly(data, x = ~Women, y = ~Men, text = ~School, type = 'scatter',
mode = 'markers', size = ~gap, color = ~State, colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
library(plotly)
library(stringr)
library(dplyr)
p <- plot_ly(data, x = ~Women, y = ~Men, text = ~School, type = 'scatter',
mode = 'markers', size = ~gap, color = ~State, colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
p
drg.name <- c('039 - EXTRACRANIAL PROCEDURES W/O CC/MCC')
p
tab7.data <- patient.data
#we subsitude the $ sign by blank space in order to put the only number in the dataset
tab7.data$Average.Total.Payments <- lapply(tab7.data$Average.Total.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
tab7.data$Average.Medicare.Payments <- lapply(tab7.data$Average.Medicare.Payments,
function(x)as.numeric(gsub("[,$]","",x)))
hospital.data <- select(tab7.data,
DRG.Definition,
Provider.Name,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)%>%
#select the information that is about the selected DRC
filter(DRG.Definition == drg.name)%>%
#Output the information that we need
select(Provider.Name,
Average.Total.Payments,
Average.Medicare.Payments,
payment.medicare.gap)
#make a scatter plot
scatter.plot <- plot_ly(hospital.data,
x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~paste('Total Payment:', Average.Total.Payments,
'Medicare Coverage:', Average.Medicare.Payments,
'Hospital Name:', Provider.Name))
scatter.plot
tab7.data
View(tab7.data)
tab7.data$payment.medicare.gap <- as.numeric(tab7.data$Average.Total.Payments) - as.numeric(tab7.data$Average.Medicare.Payments)
View(tab7.data)
d <- diamonds[sample(nrow(diamonds), 1000), ]
p <- plot_ly(
d, x = ~carat, y = ~price,
# Hover text:
text = ~paste("Price: ", price, '$<br>Cut:', cut),
color = ~carat, size = ~carat
)
p
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = ~carat, y = ~price, color = ~carat,
size = ~carat, text = ~paste("Clarity: ", clarity))
scatter.plot <- plot_ly(hospital.data,
x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~paste('Total Payment:', Average.Total.Payments,
'Medicare Coverage:', Average.Medicare.Payments,
'Hospital Name:', Provider.Name),
color = ~payment.medicare.gap,
size = ~payment.medicare.gap)
scatter.plot
p <- plot_ly(data, x = ~Women, y = ~Men,
text = ~School, type = 'scatter', mode = 'markers',
size = ~gap, color = ~State, colors = 'Paired',
#Choosing the range of the bubbles' sizes:
sizes = c(10, 50),
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
p
p <- plot_ly(tab7.data, x = ~Average.Total.Payments, y = ~Average.Medicare.Payments,
text = ~Provider.Name, type = 'scatter', mode = 'markers',
size = ~payment.medicare.gap, color = ~Provider.Name, colors = 'Paired',
#Choosing the range of the bubbles' sizes:
sizes = c(10, 50),
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
p
scatter.plot <- plot_ly(hospital.data,
x = ~Average.Total.Payments,
y = ~Average.Medicare.Payments,
#Hover text
text = ~paste('Total Payment:', Average.Total.Payments,
'Medicare Coverage:', Average.Medicare.Payments,
'Hospital Name:', Provider.Name),
color = ~payment.medicare.gap,
size = ~payment.medicare.gap)
scatter.plot
p <- plot_ly(hospital.data, x = ~Average.Total.Payments, y = ~Average.Medicare.Payments,
text = ~Provider.Name,
type = 'scatter', mode = 'markers', size = ~payment.medicare.gap,
color = ~Provider.Name, colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Hospital Information',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
showlegend = FALSE)
p
shiny::runApp()
runApp()
runApp()
setwd("~/2016Fall_INFO201/Project_Hospital_Information/Musetab7")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp('~/2016Fall_INFO201/Project_Hospital_Information/Musetab3_backup')
runApp('~/2016Fall_INFO201/Project_Hospital_Information/Musetab3_backup')
runApp('~/2016Fall_INFO201/Project_Hospital_Information/Musetab3_backup')
runApp('~/2016Fall_INFO201/Project_Hospital_Information/Musetab3_backup')
runApp('~/2016Fall_INFO201/Project_Hospital_Information/Musetab3_backup')
runApp('~/2016Fall_INFO201/Project_Hospital_Information/Musetab3_backup')
runApp('~/2016Fall_INFO201/Project_Hospital_Information/Musetab3_backup')
runApp('~/2016Fall_INFO201/Project_Hospital_Information/Musetab3_backup')
runApp('~/2016Fall_INFO201/Project_Hospital_Information/Musetab3_backup')
runApp('~/2016Fall_INFO201/Project_Hospital_Information/Musetab3_backup')
runApp('~/2016Fall_INFO201/Project_Hospital_Information/Musetab3_backup')
shiny::runApp('~/2016Fall_INFO201/Project_Hospital_Information/Navigation')
