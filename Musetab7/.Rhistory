hist(iris$Sepal.Length,probability = TRUE,xlim = c(4,8),breaks = seq(from = 4, to = 8, by = 0.25))
lines(Sepal.Length.Density,bw=0.25)
lines(Sepal.Length.Density,bw=0.25, col = 'red')
lines(Sepal.Length.Density,bw=0.25, col = 'red', lwd = 3)
hist(iris$Sepal.Length,probability = TRUE,col = 'yellow',xlim = c(4,8),breaks = seq(from = 4, to = 8, by = 0.25))
lines(Sepal.Length.Density,bw=0.25, col = 'red', lwd = 3)
hist(iris$Sepal.Length,probability = TRUE,col = 'pink',xlim = c(4,8),breaks = seq(from = 4, to = 8, by = 0.25))
lines(Sepal.Length.Density,bw=0.25, col = 'red', lwd = 3)
lines(Sepal.Length.Density,bw=0.25, col = 'blue', lwd = 3)
iris
Sepal.Length.Density.setosa <- density(iris$Sepal.Length[iris$Species == 'setosa'])
hist(iris$Sepal.Length,main = 'Sepal.Length',probability = TRUE,col = 'pink',xlim = c(4,8),breaks = seq(from = 4, to = 8, by = 0.25))
plot(Sepal.Length.Density.setosa)
plot(Sepal.Length.Density.setosa, col ='red',lwd = 3)
Sepal.Length.Density.versicolor <- density(iris$Sepal.Length[iris$Species == 'versicolor'])
lines(Sepal.Length.Density.versicolor, col = 'green', lwd = 3)
Sepal.Length.Density.virginica <- density(iris$Sepal.Length[iris$Species == 'virginica'])
lines(Sepal.Length.Density.virginica, col = 'yellow', lwd = 3)
plot(Sepal.Length.Density.setosa, bw = 0.25,col ='red',lwd = 3)
lines(Sepal.Length.Density.versicolor, bw = 0.25 ,col = 'green', lwd = 3)
lines(Sepal.Length.Density.virginica, bw = 0.25 ,col = 'yellow', lwd = 3)
plot(Sepal.Length.Density.setosa, bw = 0.4, col ='red',lwd = 3)
lines(Sepal.Length.Density.versicolor, bw = 0.4 ,col = 'green', lwd = 3)
lines(Sepal.Length.Density.virginica, bw = 0.4 ,col = 'yellow', lwd = 3)
plot(Sepal.Length.Density.setosa, xlim = c(4,8) ,bw = 0.4, col ='red',lwd = 3)
lines(Sepal.Length.Density.versicolor, xlim = c(4,8), bw = 0.4 ,col = 'green', lwd = 3)
lines(Sepal.Length.Density.virginica, xlim = c(4,8), bw = 0.4 ,col = 'yellow', lwd = 3)
legend('topright',c('versicolor','virginica'),col=c(rgb(1,1,0,0.7),rgb(0,1,1,0.4)),lwd=1.5,cex=0.8,bg='gray')
Sepal.Length.Density.setosa <- density(iris$Sepal.Length[iris$Species == 'setosa'])
Sepal.Length.Density.versicolor <- density(iris$Sepal.Length[iris$Species == 'versicolor'])
Sepal.Length.Density.virginica <- density(iris$Sepal.Length[iris$Species == 'virginica'])
plot(Sepal.Length.Density.setosa, xlim = c(4,8), bw = 0.4, col ='red',lwd = 3)
lines(Sepal.Length.Density.versicolor, xlim = c(4,8), bw = 0.4 ,col = 'green', lwd = 3)
lines(Sepal.Length.Density.virginica, xlim = c(4,8), bw = 0.4 ,col = 'yellow', lwd = 3)
legend('topright',c('setosa','versicolor','virginica'),col=c('red','green','yellow')lwd=1.5,cex=0.8,bg='gray')
legend('topright',c('setosa','versicolor','virginica'),col=c('red','green','yellow'),lwd=1.5,cex=0.8,bg='gray')
legend('topright',c('setosa','versicolor','virginica'),col=c('red','green','yellow'),lwd=1,cex=0.8,bg='gray')
Sepal.Length.Density.setosa <- density(iris$Sepal.Length[iris$Species == 'setosa'])
Sepal.Length.Density.versicolor <- density(iris$Sepal.Length[iris$Species == 'versicolor'])
Sepal.Length.Density.virginica <- density(iris$Sepal.Length[iris$Species == 'virginica'])
plot(Sepal.Length.Density.setosa, xlim = c(4,8), bw = 0.4, col ='red',lwd = 3)
lines(Sepal.Length.Density.versicolor, xlim = c(4,8), bw = 0.4 ,col = 'green', lwd = 3)
lines(Sepal.Length.Density.virginica, xlim = c(4,8), bw = 0.4 ,col = 'yellow', lwd = 3)
legend('topright',c('setosa','versicolor','virginica'),col=c('red','green','yellow'),lwd=1,cex=0.8,bg='gray')
plot(Sepal.Length.Density.setosa, main = Sepal.Length.Species ,xlim = c(4,8), bw = 0.4, col ='red',lwd = 3)
plot(Sepal.Length.Density.setosa, main = 'Sepal.Length.Species' ,xlim = c(4,8), bw = 0.4, col ='red',lwd = 3)
lines(Sepal.Length.Density.versicolor, xlim = c(4,8), bw = 0.4 ,col = 'green', lwd = 3)
lines(Sepal.Length.Density.virginica, xlim = c(4,8), bw = 0.4 ,col = 'yellow', lwd = 3)
legend('topright',c('setosa','versicolor','virginica'),col=c('red','green','yellow'),lwd=1,cex=0.8,bg='gray')
plot(Sepal.Length.Density.versicolor - Sepal.Length.Density.virginica, bw = 0.4, xlim = c(4,9))
Sepal.Length.Density.versicolor.minus.virginica<-density(iris$Sepal.Length[iris$Species == 'versicolor'] - iris$Sepal.Length[iris$Species == 'virginica'])
Density.versicolor.minus.virginica<-density(iris$Sepal.Length[iris$Species == 'versicolor'] - iris$Sepal.Length[iris$Species == 'virginica'])
plot(Density.versicolor.minus.virginica, bw = 0.4, xlim = c(4,9))
Density.setosa <- density(iris$Sepal.Length[iris$Species == 'setosa'])
Density.versicolor <- density(iris$Sepal.Length[iris$Species == 'versicolor'])
Density.virginica <- density(iris$Sepal.Length[iris$Species == 'virginica'])
plot(Density.setosa, main = 'Sepal.Length.Species' ,xlim = c(4,8), bw = 0.4, col ='red',lwd = 3)
lines(Density.versicolor, xlim = c(4,8), bw = 0.4 ,col = 'green', lwd = 3)
lines(Density.virginica, xlim = c(4,8), bw = 0.4 ,col = 'yellow', lwd = 3)
legend('topright',c('setosa','versicolor','virginica'),col=c('red','green','yellow'),lwd=1,cex=0.8,bg='gray')
Density.versicolor.minus.virginica<-density(iris$Sepal.Length[iris$Species == 'versicolor'] - iris$Sepal.Length[iris$Species == 'virginica'])
plot(Density.versicolor.minus.virginica, bw = 0.4, xlim = c(4,9))
Density.setosa <- density(iris$Sepal.Length[iris$Species == 'setosa'],  bw = 0.4)
Density.versicolor <- density(iris$Sepal.Length[iris$Species == 'versicolor'], bw = 0.4 )
Density.virginica <- density(iris$Sepal.Length[iris$Species == 'virginica'], bw = 0.4)
plot(Density.setosa, main = 'Sepal.Length.Species' ,xlim = c(4,8), bw = 0.4, col ='red',lwd = 3)
lines(Density.versicolor, xlim = c(4,8),col = 'green', lwd = 3)
lines(Density.virginica, xlim = c(4,8),col = 'yellow', lwd = 3)
Density.setosa <- density(iris$Sepal.Length[iris$Species == 'setosa'],  bw = 0.4, from = 4, to = 8)
Density.versicolor <- density(iris$Sepal.Length[iris$Species == 'versicolor'], bw = 0.4, from = 4, to = 8)
Density.virginica <- density(iris$Sepal.Length[iris$Species == 'virginica'], bw = 0.4, from = 4, to = 8)
plot(Density.setosa, main = 'Sepal.Length.Species' ,xlim = c(4,8), bw = 0.4, col ='red',lwd = 3)
lines(Density.versicolor, xlim = c(4,8),col = 'green', lwd = 3)
lines(Density.virginica, xlim = c(4,8),col = 'yellow', lwd = 3)
Sepal.Length.Density <- density(iris$Sepal.Length, bw=0.25, from = 4, to = 8)
hist(iris$Sepal.Length,main = 'Sepal.Length',probability = TRUE,col = 'pink',xlim = c(4,8), breaks = seq(from = 4, to = 8, by = 0.25))
lines(Sepal.Length.Density, col = 'blue', lwd = 3)
Density.versicolor.minus.virginica<-density(iris$Sepal.Length[iris$Species == 'versicolor'] - iris$Sepal.Length[iris$Species == 'virginica'], bw = 0.4, from = 4, to = 9)
plot(Density.versicolor.minus.virginica,  xlim = c(4,9))
plot(Density.versicolor.minus.virginica,  xlim = c(4,9), main = 'versicolor minus virginica')
Density.versicolor - Density.virginica
Density.versicolo
Density.versicolor
Density.virginica
plot(x=data1_den$x,
y=data1_den$y-data2_den$y,
col="brown",lwd=4,
main="Density Difference",
xlab="Sepal.Length",
type="l", ylab="density(data1) - density(data2)")
abline(h=0)
data1_den <- density(data1, from=4, to=8)
data2_den <- density(data2, from=4, to=8)
plot(x = Density.versicolor$x,
y = Density.versicolor$y - Density.verginica$y,
col="purple",lwd=4,
main="Density Difference",
xlab="Sepal.Length",
type="l", ylab="density(Density.versicolor) - density(Density.Verginica)")
xlim = c(4,9))
plot(x = Density.versicolor$x,
y = Density.versicolor$y - Density.verginica$y,
col= "purple",lwd=4,
main = "Density Difference",
xlab = "Sepal.Length",
ylab = "density(Density.versicolor) - density(Density.Verginica)")
xlim = c(4,9))
plot(x = Density.versicolor$x,
y = Density.versicolor$y - Density.virginica$y,
col= "purple",lwd=4,
main = "Density Difference",
xlab = "Sepal.Length",
ylab = "density(Density.versicolor) - density(Density.Verginica)")
xlim = c(4,9))
plot(x = Density.versicolor$x,
y = Density.versicolor$y - Density.virginica$y,
col= "purple",lwd=3,
main = "Density Difference",
xlab = "Sepal.Length",
ylab = "density(Density.versicolor) - density(Density.Verginica)")
xlim = c(4,9))
plot(x = Density.versicolor$x,
y = Density.versicolor$y - Density.virginica$y,
col= "purple",lwd=3,
main = "Density Difference",
xlab = "Sepal.Length",
ylab = "density(Density.versicolor) - density(Density.Verginica)",
xlim = c(4,9))
plot(x = Density.versicolor$x,
y = Density.versicolor$y - Density.virginica$y,
col= "purple",lwd=2,
main = "Density Difference",
xlab = "Sepal.Length",
ylab = "density(Density.versicolor) - density(Density.Verginica)",
xlim = c(4,9))
plot(x = Density.versicolor$x,
y = Density.versicolor$y - Density.virginica$y,
col= "purple",lwd=0.8,
main = "Density Difference",
xlab = "Sepal.Length",
ylab = "density(Density.versicolor) - density(Density.Verginica)",
xlim = c(4,9))
Sepal.Length.Petal.Width<-density(x = iris$Sepal.Length, y = iris$Petal.Width, bw = 0.2)
Sepal.Length.Petal.Width<- cbind(iris$Sepal.Length, iris$Petal.Length)
library(KernSmooth)
Sepal.Length.Petal.Width<- cbind(iris$Sepal.Length, iris$Petal.Length)
library(KernSmooth)
data1 <- cbind(iris$Sepal.Length, iris$Petal.Length)
iris_kde <- bkde2D(data1, bandwidth = 0.25,
gridsize = c(101,101),
range.x=list(c(4,8),c(1,7)))
iris_kde
Sepal.Length.Petal.Width<- cbind(iris$Sepal.Length, iris$Petal.Length)
iris_kde <- bkde2D(Sepal.Length.Petal.Width, bandwidth = 0.2,
gridsize = c(101,101),
range.x=list(c(4,8),c(1,7)))
iris_kde
iris_kde <- bkde2D(Sepal.Length.Petal.Width, bandwidth = 0.2,
gridsize = c(101,101),
range.x=list(c(4,8),c(1,7)))
contour(x=iris_kde$x1,y=iris_kde$x2,
z=iris_kde$fhat, lwd=3,
main="Density Contour (Iris Data)",
xlab="Sepal.Length", ylab="Petal.Length")
View(iris_kde)
Sepal.Length.Petal.Width<- cbind(iris$Sepal.Length, iris$Petal.Length)
iris.bkde <- bkde2D(Sepal.Length.Petal.Width, bandwidth = 0.2,
gridsize = c(101,101),
range.x=list(c(4,8),c(1,7)))
contour(x=iris.bkde$x1,y=iris.bkde$x2,
z=iris.bkde$fhat, lwd=3,
main="Density Contour (Iris Data)",
xlab="Sepal.Length", ylab="Petal.Length")
image(iris.bkde, col = terrain.colors(12))
iris.bkde <- bkde2D(Sepal.Length.Petal.Width, bandwidth = 0.2,
gridsize = c(101,101),
range.x=list(c(4,8),c(1,7)))
contour(x=iris.bkde$x1,y=iris.bkde$x2,
z=iris.bkde$fhat, lwd=3,
main="Density Contour (Iris Data)",
xlab="Sepal.Length", ylab="Petal.Length")
dev.off()
contour(x=iris.bkde$x1,y=iris.bkde$x2,
z=iris.bkde$fhat, lwd=3,
main="Density Contour (Iris Data)",
xlab="Sepal.Length", ylab="Petal.Length")
library(shiny)
shinyServer(function(input, output) {
output$scatter <- renderPlot({
x <- rnorm(input$num)
y <- rnorm(input$num)
return(plot(x,y, col=input$color))
})
})
runApp('INFO_201/m14-shiny/exercise-2')
shinyServer(function(input, output) {
# Reder a histogram of a given color
output$histogram <- renderPlot({
x <- rnorm(1000)
return(hist(x, col = input$color))
})
})
runApp('INFO_201/m14-shiny/demo-3')
library(dplyr)
# Read in data
setwd('~/Documents/info-201/m14-shiny/exercise-3/')
source('./scripts/buildMap.R')
df <- read.csv('./data/electoral_college.csv', stringsAsFactors = FALSE)
state.codes <- read.csv('./data/state_codes.csv', stringsAsFactors = FALSE)
# Join together state.codes and df
joined.data <- left_join(df, state.codes, by="state")
# Compute the electoral votes per 100K people in each state
joined.data <- joined.data %>% mutate(ratio = votes/population * 100000)
# Start shinyServer
shinyServer(function(input, output) {
# Render a plotly object that returns your map
output$map <- renderPlotly({
return(BuildMap(joined.data, 'population'))
})
})
runApp('INFO_201/m14-shiny/exercise-3')
shinyUI(fluidPage(
mainPanel(
# Add a selectInput (with a proper id) that allows you to select a variable to map
# Use plotlyOutput to show your map
plotlyOutput('map')
)
))
runApp('INFO_201/m14-shiny/exercise-3')
runApp('INFO_201/m14-shiny/exercise-3')
# BuildMap file: function that returns a plotly map
# BuildMap file: function that returns a plotly map
library(plotly)
library(stringr)
# BuildMap function: fill this in with a function that returns a map:
# Derived from: https://plot.ly/r/choropleth-maps/
BuildMap <- function(data, map.var) {
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
# Make equation for map color / text
var.equation <- paste0('~', map.var)
# Plot
p <- plot_geo(data, locationmode = 'USA-states') %>%
add_trace(
z = eval(parse(text = var.equation)), text = ~state, locations = ~code,
color = eval(parse(text = var.equation)), colors = 'Purples'
) %>%
colorbar(title = "Color Title") %>%
layout(
title = str_to_title(map.var),
geo = g
)
return(p)
}
runApp('INFO_201/m14-shiny/demo-3')
runApp('INFO_201/m14-shiny/demo-3')
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
runApp('INFO_201/m14-shiny/exercise-4')
runApp('INFO_201/m14-shiny/demo-1')
runApp('INFO_201/m14-shiny/demo-1')
runApp('INFO_201/m14-shiny/exercise-3')
library(plotly)
runApp('INFO_201/m14-shiny/demo-1')
library(plotly)
runApp('INFO_201/m14-shiny/exercise-3')
runApp('INFO_201/m14-shiny/exercise-4')
library(plotly)
runApp('INFO_201/m14-shiny/exercise-4')
runApp('INFO_201/m14-shiny/exercise-4')
runApp('INFO_201/m14-shiny/exercise-4')
runApp('INFO_201/m14-shiny/exercise-4')
runApp('INFO_201/m14-shiny/exercise-4')
runApp('INFO_201/m14-shiny/exercise-4')
source('./scripts/buildScatter.R')
getwd()
source('C:/Users/HeyMuse/Documents/INFO_201/M14-shiny/scripts/buildScatter.R')
source('C:/Users/HeyMuse/Documents/INFO_201/m14-shiny/exercise-4/scripts/buildScatter.R')
df <- read.csv('./data/electoral_college.csv', stringsAsFactors = FALSE)
state.codes <- read.csv('./data/state_codes.csv', stringsAsFactors = FALSE)
image(iris.bkde, col = terrain.colors(12))
image(Sepal.Length.Petal.Width, col = terrain.colors(12))
image(Sepal.Length.Petal.Width, col = terrain.colors(12))
image(x=iris.bkde$x1, y=iris.bkde$x2, z=iris.bkde$fhat,
xlab='Sepal.Length', ylab='Petal.Length',
main='Density',
col = terrain.colors(12))
persp(x=iris.bkde$x1,y=iris.bkde$x2,
z=iris.bkde$fhat, col="gold",
xlab="Sepal.Length", ylab="Petal.Length",
zlab="Density", theta=90, phi=40)
Sepal.Length.Petal.Width<- cbind(iris$Sepal.Length, iris$Petal.Width)
iris.bkde <- bkde2D(Sepal.Length.Petal.Width, bandwidth = 0.2,
gridsize = c(101,101),
range.x=list(c(4,8),c(1,7)))
contour(x=iris.bkde$x1,y=iris.bkde$x2,
z=iris.bkde$fhat, lwd=3,
main="Density Contour (Iris Data)",
xlab="Sepal.Length", ylab="Petal.Length")
dev.off()
#1.4.b
image(x=iris.bkde$x1, y=iris.bkde$x2, z=iris.bkde$fhat,
xlab='Sepal.Length', ylab='Petal.Length',
main='Density',
col = terrain.colors(12))
#1.4.c
persp(x=iris.bkde$x1,y=iris.bkde$x2,
z=iris.bkde$fhat, col="gold",
xlab="Sepal.Length", ylab="Petal.Length",
zlab="Density", theta=90, phi=40)
zlab="Density", theta=180, phi=40)
persp(x=iris.bkde$x1,y=iris.bkde$x2,
z=iris.bkde$fhat, col="gold",
xlab="Sepal.Length", ylab="Petal.Length",
zlab="Density", theta=180, phi=40)
chickwts
View(chickwts)
length(chickwts$feed == 'casein')
length(chickwts$feed == 'linseed')
length(chickwts$feed == 'casein') == length(chickwts$feed == 'linseed')
length(chickwts$feed == 'casein')
length(chickwts$feed == 'linseed')
length(chickwts$feed == 'casein') == length(chickwts$feed == 'linseed')
Density.casein <- density(chickwts$feed == 'casein')
Density.linseed <- density(chickwts$feed == 'linseed')
plot(Density.linseed, main = 'Chickwts.Feed', bw = 30, col ='red',lwd = 3)
lines(Density.casein, col = 'green', lwd = 3, bw = 30)
legend('topright',c('linseed','casein'),col=c('red','green'),lwd=1,cex=0.8,bg='gray')
Density.casein <- density(chickwts$feed == 'casein')
Density.casein <- density(chickwts$weight[chickwts$feed] == 'casein')
Density.casein <- density(chickwts$weight[chickwts$feed] == 'casein')
Density.casein <- density(chickwts$weight[chickwts$feed] == 'casein'])
Density.casein <- density(chickwts$weight[chickwts$feed == 'casein'])
Density.linseed <- density(chickwts$weight[chickwts$feed == 'linseed'])
plot(Density.linseed, main = 'Chickwts.Feed', bw = 30, col ='red',lwd = 3)
lines(Density.casein, col = 'green', lwd = 3, bw = 30)
Density.casein <- density(chickwts$weight[chickwts$feed == 'casein'])
Density.linseed <- density(chickwts$weight[chickwts$feed == 'linseed'])
plot(Density.linseed, main = 'Chickwts.Feed', bandwidth = 30, col ='red',lwd = 3)
lines(Density.casein, col = 'green', lwd = 3, bandwidth = 30)
legend('topright',c('linseed','casein'),col=c('red','green'),lwd=1,cex=0.8,bg='gray')
Density.setosa <- density(iris$Sepal.Length[iris$Species == 'setosa'],  bw = 0.4, from = 4, to = 8)
Density.versicolor <- density(iris$Sepal.Length[iris$Species == 'versicolor'], bw = 0.4, from = 4, to = 8)
Density.virginica <- density(iris$Sepal.Length[iris$Species == 'virginica'], bw = 0.4, from = 4, to = 8)
plot(Density.setosa, main = 'Sepal.Length.Species' ,xlim = c(4,8), bw = 0.4, col ='red',lwd = 3)
lines(Density.versicolor, xlim = c(4,8),col = 'green', lwd = 3)
lines(Density.virginica, xlim = c(4,8),col = 'yellow', lwd = 3)
legend('topright',c('setosa','versicolor','virginica'),col=c('red','green','yellow'),lwd=1,cex=0.8,bg='gray')
Density.casein <- density(chickwts$weight[chickwts$feed == 'casein'])
data1 <- iris$Sepal.Length[iris$Species=="versicolor"]
data2 <- iris$Sepal.Length[iris$Species=="virginica"]
data1_den <- density(data1, from=4, to=8)
casein.data <- chickwts$weight[chickwts$feed == 'casein'])
linseed.data <- chickwts$weight[chickwts$feed == 'linseed'])
casein.data <- chickwts$weight[chickwts$feed == 'casein']
linseed.data <- chickwts$weight[chickwts$feed == 'linseed']
Density.casein<-density(casein.data)
Density.casein <- density(casein.data)
Density.linseed <- density(linseed.data)
setosa.data <- iris$Sepal.Length[iris$Species == 'setosa']
versicolor.data <- iris$Sepal.Length[iris$Species == 'versicolor']
virginica.data <- iris$Sepal.Length[iris$Species == 'virginica']
Density.setosa <- density(setosa.data, bw = 0.4, from = 4, to = 8)
Density.versicolor <- density(versicolor.data, bw = 0.4, from = 4, to = 8)
Density.virginica <- density(virginica.data, bw = 0.4, from = 4, to = 8)
plot(Density.setosa, main = 'Sepal.Length.Species' ,xlim = c(4,8), bw = 0.4, col ='red',lwd = 3)
lines(Density.versicolor, xlim = c(4,8),col = 'green', lwd = 3)
lines(Density.virginica, xlim = c(4,8),col = 'yellow', lwd = 3)
legend('topright',c('setosa','versicolor','virginica'),col=c('red','green','yellow'),lwd=1,cex=0.8,bg='gray')
plot(Density.setosa, main = 'Sepal.Length.Species', col ='red',lwd = 3)
data1 <- iris$Sepal.Length[iris$Species=="versicolor"]
data2 <- iris$Sepal.Length[iris$Species=="virginica"]
data1_den <- density(data1, from=4, to=8)
data2_den <- density(data2, from=4, to=8)
## p16
plot(data1_den, col="royalblue",lwd=4,
main="Iris data, Sepal.Length distribution",
xlab="Sepal.Length")
lines(data2_den, col="orange",lwd=4)
plot(Density.setosa, main = 'Sepal.Length.Species', col ='red', lwd = 3)
lines(Density.versicolor, xlim = c(4,8),col = 'green', lwd = 3)
lines(Density.virginica, xlim = c(4,8),col = 'yellow', lwd = 3)
legend('topright',c('setosa','versicolor','virginica'),col=c('red','green','yellow'),lwd=1,cex=0.8,bg='gray')
plot(Density.casein, col = 'orange', lwd = 4,
main = 'Chickwts.feed')
casein.data <- chickwts$weight[chickwts$feed == 'casein']
linseed.data <- chickwts$weight[chickwts$feed == 'linseed']
Density.casein <- density(casein.data)
Density.linseed <- density(linseed.data)
plot(Density.casein, col = 'orange', lwd = 4,
main = 'Chickwts.feed')
lines(Density.linseed, col = 'royalblue', lwd = 4)
col = c('orange', 'royalblue'), lwd = 6, cex = 1.5)
legend('topleft', c('casein', 'linseed'),
col = c('orange', 'royalblue'), lwd = 6, cex = 1.5)
legend('topright', c('casein', 'linseed'),
col = c('orange', 'royalblue'), lwd = 2, cex = 1.5)
legend('topright', c('casein', 'linseed'),
col = c('orange', 'royalblue'), lwd = 6, cex = 0.5)
legend('topright', c('casein', 'linseed'),
col = c('orange', 'royalblue'), lwd = 6, cex = 1)
plot(Density.casein, col = 'orange', lwd = 4,
main = 'Chickwts.feed', ylim = c(0,1))
plot(Density.casein, col = 'orange', lwd = 4,
main = 'Chickwts.feed', ylim = c(0,0.1))
plot(Density.casein, col = 'orange', lwd = 4,
main = 'Chickwts.feed', ylim = c(0,0.01))
lines(Density.linseed, col = 'royalblue', lwd = 4)
plot(Density.casein, col = 'orange', lwd = 4,
main = 'Chickwts.feed', ylim = c(0,0.07))
lines(Density.linseed, col = 'royalblue', lwd = 4)
plot(Density.casein, col = 'orange', lwd = 4,
main = 'Chickwts.feed', ylim = c(0,0.007))
lines(Density.linseed, col = 'royalblue', lwd = 4)
legend('topright', c('casein', 'linseed'),
col = c('orange', 'royalblue'), lwd = 6, cex = 1)
legend('topright',c('setosa','versicolor','virginica'),col=c('red','green','yellow'),lwd=6,cex=0.8,bg='gray')
setosa.data <- iris$Sepal.Length[iris$Species == 'setosa']
versicolor.data <- iris$Sepal.Length[iris$Species == 'versicolor']
Density.setosa <- density(setosa.data, bw = 0.4, from = 4, to = 8)
virginica.data <- iris$Sepal.Length[iris$Species == 'virginica']
Density.versicolor <- density(versicolor.data, bw = 0.4, from = 4, to = 8)
Density.virginica <- density(virginica.data, bw = 0.4, from = 4, to = 8)
plot(Density.setosa, main = 'Sepal.Length.Species', col ='red', lwd = 3)
lines(Density.versicolor, xlim = c(4,8),col = 'green', lwd = 3)
lines(Density.virginica, xlim = c(4,8),col = 'yellow', lwd = 3)
legend('topright',c('setosa','versicolor','virginica'),col=c('red','green','yellow'),lwd=6,cex=0.8,bg='gray')
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
library(shiny)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
runApp('INFO_201/a8-building-apps-HeyMuse/INFO201a8')
runApp('INFO_201/a8-building-apps-HeyMuse/INFO201a8')
input
runApp('INFO_201/a8-building-apps-HeyMuse/INFO201a8')
runApp('INFO_201/a8-building-apps-HeyMuse/INFO201a8')
runApp('INFO_201/a8-building-apps-HeyMuse/INFO201a8')
mapvar
runApp('INFO_201/a8-building-apps-HeyMuse/INFO201a8')
runApp('INFO_201/m14-shiny/exercise-3')
runApp('INFO_201/m14-shiny/exercise-3')
runApp('INFO_201/m14-shiny/exercise-3')
shiny::runApp('2016Fall_INFO201/Project_Hospital_Information/Musetap3')
runApp('2016Fall_INFO201/Project_Hospital_Information/Musetap3')
runApp('2016Fall_INFO201/Project_Hospital_Information/Musetap3')
tap7.data <- read.csv('patient_data.csv')
setwd("~/2016Fall_INFO201/Project_Hospital_Information/Musetap7")
tap7.data <- read.csv('patient_data.csv')
a <- c('2')
library(dplyr)
a1 <- tap7.data %>% filter(DRG.Definition == 'NORMAL NEWBORN')
setwd("~/2016Fall_INFO201/Project_Hospital_Information/Musetap7")
a1
a1 <- tap7.data %>% filter(DRG.Definition == 'VAGINAL DELIVERY W/O COMPLICATING DIAGNOSES')
a1
a1 <- tap7.data %>% filter(DRG.Definition == 'SEPTICEMIA OR SEVERE SEPSIS W/O MV 96+ HOURS W MCC')
a1
a1 <- tap7.data %>% filter(DRG.Definition == 'CESAREAN SECTION W/O CC/MCC')
a1
View(tap7.data)
